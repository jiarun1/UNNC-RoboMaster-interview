
USB VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007d5c  08007d5c  00017d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dfc  08007dfc  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08007dfc  08007dfc  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dfc  08007dfc  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e00  08007e00  00017e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08007e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a44  20000120  08007f24  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20000b64  08007f24  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145c7  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b0  00000000  00000000  00034710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000379c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  000384e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a55c  00000000  00000000  00038e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011293  00000000  00000000  000533dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085359  00000000  00000000  0006466f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e99c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a04  00000000  00000000  000e9a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000120 	.word	0x20000120
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d44 	.word	0x08007d44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000124 	.word	0x20000124
 8000148:	08007d44 	.word	0x08007d44

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0310 	and.w	r3, r3, #16
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0320 	orr.w	r3, r3, #32
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0320 	and.w	r3, r3, #32
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0304 	and.w	r3, r3, #4
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 f8f8 	bl	80003a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f805 	bl	80001be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f7ff ffca 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001b8:	f007 f93c 	bl	8007434 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <main+0x14>

080001be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001be:	b580      	push	{r7, lr}
 80001c0:	b094      	sub	sp, #80	; 0x50
 80001c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c8:	2228      	movs	r2, #40	; 0x28
 80001ca:	2100      	movs	r1, #0
 80001cc:	4618      	mov	r0, r3
 80001ce:	f007 fdb1 	bl	8007d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fc:	2301      	movs	r3, #1
 80001fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000200:	2302      	movs	r3, #2
 8000202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000208:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800020a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800020e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000214:	4618      	mov	r0, r3
 8000216:	f001 ff25 	bl	8002064 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000220:	f000 f828 	bl	8000274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000234:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	2101      	movs	r1, #1
 8000240:	4618      	mov	r0, r3
 8000242:	f002 f98f 	bl	8002564 <HAL_RCC_ClockConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024c:	f000 f812 	bl	8000274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000250:	2310      	movs	r3, #16
 8000252:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000254:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000258:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fae9 	bl	8002834 <HAL_RCCEx_PeriphCLKConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000268:	f000 f804 	bl	8000274 <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3750      	adds	r7, #80	; 0x50
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000278:	b672      	cpsid	i
}
 800027a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800027c:	e7fe      	b.n	800027c <Error_Handler+0x8>
	...

08000280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <HAL_MspInit+0x5c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	4a14      	ldr	r2, [pc, #80]	; (80002dc <HAL_MspInit+0x5c>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6193      	str	r3, [r2, #24]
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HAL_MspInit+0x5c>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f003 0301 	and.w	r3, r3, #1
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <HAL_MspInit+0x5c>)
 80002a0:	69db      	ldr	r3, [r3, #28]
 80002a2:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <HAL_MspInit+0x5c>)
 80002a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a8:	61d3      	str	r3, [r2, #28]
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <HAL_MspInit+0x5c>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <HAL_MspInit+0x60>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <HAL_MspInit+0x60>)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d2:	bf00      	nop
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010000 	.word	0x40010000

080002e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <NMI_Handler+0x4>

080002ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <HardFault_Handler+0x4>

080002f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <MemManage_Handler+0x4>

080002f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fa:	e7fe      	b.n	80002fa <BusFault_Handler+0x4>

080002fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <UsageFault_Handler+0x4>

08000302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr

0800030e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr

0800031a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr

08000326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000326:	b580      	push	{r7, lr}
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032a:	f000 f87f 	bl	800042c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800033a:	f000 fad1 	bl	80008e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000878 	.word	0x20000878

08000348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	; (800038c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	; (8000398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800037a:	f7ff ffe5 	bl	8000348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800037e:	f007 fcb5 	bl	8007cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff11 	bl	80001a8 <main>
  bx lr
 8000386:	4770      	bx	lr
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000390:	08007e04 	.word	0x08007e04
  ldr r2, =_sbss
 8000394:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000398:	20000b64 	.word	0x20000b64

0800039c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC1_2_IRQHandler>
	...

080003a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_Init+0x28>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <HAL_Init+0x28>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003b0:	2003      	movs	r0, #3
 80003b2:	f000 f923 	bl	80005fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003b6:	200f      	movs	r0, #15
 80003b8:	f000 f808 	bl	80003cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003bc:	f7ff ff60 	bl	8000280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003c0:	2300      	movs	r3, #0
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40022000 	.word	0x40022000

080003cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_InitTick+0x54>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_InitTick+0x58>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4619      	mov	r1, r3
 80003de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f93b 	bl	8000666 <HAL_SYSTICK_Config>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	e00e      	b.n	8000418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b0f      	cmp	r3, #15
 80003fe:	d80a      	bhi.n	8000416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000400:	2200      	movs	r2, #0
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	f04f 30ff 	mov.w	r0, #4294967295
 8000408:	f000 f903 	bl	8000612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800040c:	4a06      	ldr	r2, [pc, #24]	; (8000428 <HAL_InitTick+0x5c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000412:	2300      	movs	r3, #0
 8000414:	e000      	b.n	8000418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000416:	2301      	movs	r3, #1
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000000 	.word	0x20000000
 8000424:	20000008 	.word	0x20000008
 8000428:	20000004 	.word	0x20000004

0800042c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <HAL_IncTick+0x1c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <HAL_IncTick+0x20>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4413      	add	r3, r2
 800043c:	4a03      	ldr	r2, [pc, #12]	; (800044c <HAL_IncTick+0x20>)
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	20000008 	.word	0x20000008
 800044c:	200003b0 	.word	0x200003b0

08000450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  return uwTick;
 8000454:	4b02      	ldr	r3, [pc, #8]	; (8000460 <HAL_GetTick+0x10>)
 8000456:	681b      	ldr	r3, [r3, #0]
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	200003b0 	.word	0x200003b0

08000464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800047a:	68ba      	ldr	r2, [r7, #8]
 800047c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000480:	4013      	ands	r3, r2
 8000482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800048c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000496:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	60d3      	str	r3, [r2, #12]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <__NVIC_GetPriorityGrouping+0x18>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	0a1b      	lsrs	r3, r3, #8
 80004b6:	f003 0307 	and.w	r3, r3, #7
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	db0b      	blt.n	80004f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f003 021f 	and.w	r2, r3, #31
 80004e0:	4906      	ldr	r1, [pc, #24]	; (80004fc <__NVIC_EnableIRQ+0x34>)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	095b      	lsrs	r3, r3, #5
 80004e8:	2001      	movs	r0, #1
 80004ea:	fa00 f202 	lsl.w	r2, r0, r2
 80004ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	e000e100 	.word	0xe000e100

08000500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db0a      	blt.n	800052a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b2da      	uxtb	r2, r3
 8000518:	490c      	ldr	r1, [pc, #48]	; (800054c <__NVIC_SetPriority+0x4c>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	0112      	lsls	r2, r2, #4
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	440b      	add	r3, r1
 8000524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000528:	e00a      	b.n	8000540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <__NVIC_SetPriority+0x50>)
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f003 030f 	and.w	r3, r3, #15
 8000536:	3b04      	subs	r3, #4
 8000538:	0112      	lsls	r2, r2, #4
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	440b      	add	r3, r1
 800053e:	761a      	strb	r2, [r3, #24]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000e100 	.word	0xe000e100
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000554:	b480      	push	{r7}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	f1c3 0307 	rsb	r3, r3, #7
 800056e:	2b04      	cmp	r3, #4
 8000570:	bf28      	it	cs
 8000572:	2304      	movcs	r3, #4
 8000574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	3304      	adds	r3, #4
 800057a:	2b06      	cmp	r3, #6
 800057c:	d902      	bls.n	8000584 <NVIC_EncodePriority+0x30>
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	3b03      	subs	r3, #3
 8000582:	e000      	b.n	8000586 <NVIC_EncodePriority+0x32>
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000588:	f04f 32ff 	mov.w	r2, #4294967295
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43da      	mvns	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	401a      	ands	r2, r3
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059c:	f04f 31ff 	mov.w	r1, #4294967295
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	43d9      	mvns	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	4313      	orrs	r3, r2
         );
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3724      	adds	r7, #36	; 0x24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005c8:	d301      	bcc.n	80005ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00f      	b.n	80005ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <SysTick_Config+0x40>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005d6:	210f      	movs	r1, #15
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f7ff ff90 	bl	8000500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SysTick_Config+0x40>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SysTick_Config+0x40>)
 80005e8:	2207      	movs	r2, #7
 80005ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	e000e010 	.word	0xe000e010

080005fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff2d 	bl	8000464 <__NVIC_SetPriorityGrouping>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000624:	f7ff ff42 	bl	80004ac <__NVIC_GetPriorityGrouping>
 8000628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	6978      	ldr	r0, [r7, #20]
 8000630:	f7ff ff90 	bl	8000554 <NVIC_EncodePriority>
 8000634:	4602      	mov	r2, r0
 8000636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff5f 	bl	8000500 <__NVIC_SetPriority>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff35 	bl	80004c8 <__NVIC_EnableIRQ>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ffa2 	bl	80005b8 <SysTick_Config>
 8000674:	4603      	mov	r3, r0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800067e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000680:	b08b      	sub	sp, #44	; 0x2c
 8000682:	af06      	add	r7, sp, #24
 8000684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d101      	bne.n	8000690 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	e0fd      	b.n	800088c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d106      	bne.n	80006aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f007 f861 	bl	800776c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2203      	movs	r2, #3
 80006ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 f998 	bl	80029ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	687e      	ldr	r6, [r7, #4]
 80006c4:	466d      	mov	r5, sp
 80006c6:	f106 0410 	add.w	r4, r6, #16
 80006ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	602b      	str	r3, [r5, #0]
 80006d2:	1d33      	adds	r3, r6, #4
 80006d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006d6:	6838      	ldr	r0, [r7, #0]
 80006d8:	f002 f962 	bl	80029a0 <USB_CoreInit>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d005      	beq.n	80006ee <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2202      	movs	r2, #2
 80006e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e0ce      	b.n	800088c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 f993 	bl	8002a20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	e04c      	b.n	800079a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	440b      	add	r3, r1
 8000710:	3301      	adds	r3, #1
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	440b      	add	r3, r1
 8000726:	7bfa      	ldrb	r2, [r7, #15]
 8000728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b298      	uxth	r0, r3
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	440b      	add	r3, r1
 800073c:	3336      	adds	r3, #54	; 0x36
 800073e:	4602      	mov	r2, r0
 8000740:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	440b      	add	r3, r1
 8000752:	3303      	adds	r3, #3
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	440b      	add	r3, r1
 8000766:	3338      	adds	r3, #56	; 0x38
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800076c:	7bfa      	ldrb	r2, [r7, #15]
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	440b      	add	r3, r1
 800077a:	333c      	adds	r3, #60	; 0x3c
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000780:	7bfa      	ldrb	r2, [r7, #15]
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	440b      	add	r3, r1
 800078e:	3340      	adds	r3, #64	; 0x40
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	3301      	adds	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
 800079a:	7bfa      	ldrb	r2, [r7, #15]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d3ad      	bcc.n	8000700 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	e044      	b.n	8000834 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80007aa:	7bfa      	ldrb	r2, [r7, #15]
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	440b      	add	r3, r1
 80007b8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80007c0:	7bfa      	ldrb	r2, [r7, #15]
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	440b      	add	r3, r1
 80007ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80007d2:	7bfa      	ldrb	r2, [r7, #15]
 80007d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007d6:	7bfa      	ldrb	r2, [r7, #15]
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	440b      	add	r3, r1
 80007e4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	4613      	mov	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	440b      	add	r3, r1
 80007fa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000818:	7bfa      	ldrb	r2, [r7, #15]
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	440b      	add	r3, r1
 8000826:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	3301      	adds	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	7bfa      	ldrb	r2, [r7, #15]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	429a      	cmp	r2, r3
 800083c:	d3b5      	bcc.n	80007aa <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	687e      	ldr	r6, [r7, #4]
 8000846:	466d      	mov	r5, sp
 8000848:	f106 0410 	add.w	r4, r6, #16
 800084c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	602b      	str	r3, [r5, #0]
 8000854:	1d33      	adds	r3, r6, #4
 8000856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000858:	6838      	ldr	r0, [r7, #0]
 800085a:	f002 f8ed 	bl	8002a38 <USB_DevInit>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2202      	movs	r2, #2
 8000868:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e00d      	b.n	800088c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f004 fa74 	bl	8004d72 <USB_DevDisconnect>

  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000894 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d101      	bne.n	80008aa <HAL_PCD_Start+0x16>
 80008a6:	2302      	movs	r3, #2
 80008a8:	e016      	b.n	80008d8 <HAL_PCD_Start+0x44>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2201      	movs	r2, #1
 80008ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f882 	bl	80029c0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008bc:	2101      	movs	r1, #1
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f007 f9dd 	bl	8007c7e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fa48 	bl	8004d5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 fa4a 	bl	8004d86 <USB_ReadInterrupts>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008fc:	d102      	bne.n	8000904 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 fb8e 	bl	8001020 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fa3c 	bl	8004d86 <USB_ReadInterrupts>
 800090e:	4603      	mov	r3, r0
 8000910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000918:	d112      	bne.n	8000940 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000922:	b29a      	uxth	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800092c:	b292      	uxth	r2, r2
 800092e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f006 ff95 	bl	8007862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000938:	2100      	movs	r1, #0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f925 	bl	8000b8a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f004 fa1e 	bl	8004d86 <USB_ReadInterrupts>
 800094a:	4603      	mov	r3, r0
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000954:	d10b      	bne.n	800096e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800095e:	b29a      	uxth	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000968:	b292      	uxth	r2, r2
 800096a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fa07 	bl	8004d86 <USB_ReadInterrupts>
 8000978:	4603      	mov	r3, r0
 800097a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000982:	d10b      	bne.n	800099c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000996:	b292      	uxth	r2, r2
 8000998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 f9f0 	bl	8004d86 <USB_ReadInterrupts>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009b0:	d126      	bne.n	8000a00 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 0204 	bic.w	r2, r2, #4
 80009c4:	b292      	uxth	r2, r2
 80009c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f022 0208 	bic.w	r2, r2, #8
 80009dc:	b292      	uxth	r2, r2
 80009de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f006 ff76 	bl	80078d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009fa:	b292      	uxth	r2, r2
 80009fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f004 f9be 	bl	8004d86 <USB_ReadInterrupts>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a14:	f040 8084 	bne.w	8000b20 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77fb      	strb	r3, [r7, #31]
 8000a1c:	e011      	b.n	8000a42 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	7ffb      	ldrb	r3, [r7, #31]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	441a      	add	r2, r3
 8000a2a:	7ffb      	ldrb	r3, [r7, #31]
 8000a2c:	8812      	ldrh	r2, [r2, #0]
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	f107 0120 	add.w	r1, r7, #32
 8000a36:	440b      	add	r3, r1
 8000a38:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	77fb      	strb	r3, [r7, #31]
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	2b07      	cmp	r3, #7
 8000a46:	d9ea      	bls.n	8000a1e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
 8000a72:	b292      	uxth	r2, r2
 8000a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a78:	bf00      	nop
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f6      	beq.n	8000a7a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a9e:	b292      	uxth	r2, r2
 8000aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	77fb      	strb	r3, [r7, #31]
 8000aa8:	e010      	b.n	8000acc <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000aaa:	7ffb      	ldrb	r3, [r7, #31]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	7ffa      	ldrb	r2, [r7, #31]
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	440a      	add	r2, r1
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	f107 0120 	add.w	r1, r7, #32
 8000abe:	440b      	add	r3, r1
 8000ac0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000ac4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	77fb      	strb	r3, [r7, #31]
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	d9eb      	bls.n	8000aaa <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f042 0208 	orr.w	r2, r2, #8
 8000ae4:	b292      	uxth	r2, r2
 8000ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000afc:	b292      	uxth	r2, r2
 8000afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 0204 	orr.w	r2, r2, #4
 8000b14:	b292      	uxth	r2, r2
 8000b16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f006 fec0 	bl	80078a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 f92e 	bl	8004d86 <USB_ReadInterrupts>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b34:	d10e      	bne.n	8000b54 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f006 fe79 	bl	8007846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 f914 	bl	8004d86 <USB_ReadInterrupts>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b68:	d10b      	bne.n	8000b82 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b7c:	b292      	uxth	r2, r2
 8000b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	460b      	mov	r3, r1
 8000b94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d101      	bne.n	8000ba4 <HAL_PCD_SetAddress+0x1a>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e013      	b.n	8000bcc <HAL_PCD_SetAddress+0x42>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	78fa      	ldrb	r2, [r7, #3]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 f8bb 	bl	8004d38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	4608      	mov	r0, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	4603      	mov	r3, r0
 8000be4:	70fb      	strb	r3, [r7, #3]
 8000be6:	460b      	mov	r3, r1
 8000be8:	803b      	strh	r3, [r7, #0]
 8000bea:	4613      	mov	r3, r2
 8000bec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da0e      	bge.n	8000c18 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bfa:	78fb      	ldrb	r3, [r7, #3]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2201      	movs	r2, #1
 8000c14:	705a      	strb	r2, [r3, #1]
 8000c16:	e00e      	b.n	8000c36 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	f003 0207 	and.w	r2, r3, #7
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c42:	883a      	ldrh	r2, [r7, #0]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	78ba      	ldrb	r2, [r7, #2]
 8000c4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d004      	beq.n	8000c60 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c60:	78bb      	ldrb	r3, [r7, #2]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d102      	bne.n	8000c6c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <HAL_PCD_EP_Open+0xa6>
 8000c76:	2302      	movs	r3, #2
 8000c78:	e00e      	b.n	8000c98 <HAL_PCD_EP_Open+0xc4>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68f9      	ldr	r1, [r7, #12]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 ff0b 	bl	8002aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8000c96:	7afb      	ldrb	r3, [r7, #11]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da0e      	bge.n	8000cd2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	705a      	strb	r2, [r3, #1]
 8000cd0:	e00e      	b.n	8000cf0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	f003 0207 	and.w	r2, r3, #7
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2200      	movs	r2, #0
 8000cee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d101      	bne.n	8000d0a <HAL_PCD_EP_Close+0x6a>
 8000d06:	2302      	movs	r3, #2
 8000d08:	e00e      	b.n	8000d28 <HAL_PCD_EP_Close+0x88>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68f9      	ldr	r1, [r7, #12]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fa2d 	bl	8003178 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	f003 0207 	and.w	r2, r3, #7
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d70:	7afb      	ldrb	r3, [r7, #11]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6979      	ldr	r1, [r7, #20]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 fbdf 	bl	8003550 <USB_EPStartXfer>
 8000d92:	e005      	b.n	8000da0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6979      	ldr	r1, [r7, #20]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fbd8 	bl	8003550 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	f003 0207 	and.w	r2, r3, #7
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000dcc:	681b      	ldr	r3, [r3, #0]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	460b      	mov	r3, r1
 8000de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2201      	movs	r2, #1
 8000e22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e30:	7afb      	ldrb	r3, [r7, #11]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d106      	bne.n	8000e48 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6979      	ldr	r1, [r7, #20]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fb85 	bl	8003550 <USB_EPStartXfer>
 8000e46:	e005      	b.n	8000e54 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6979      	ldr	r1, [r7, #20]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fb7e 	bl	8003550 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	f003 0207 	and.w	r2, r3, #7
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d901      	bls.n	8000e7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e04c      	b.n	8000f16 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	da0e      	bge.n	8000ea2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	705a      	strb	r2, [r3, #1]
 8000ea0:	e00c      	b.n	8000ebc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_PCD_EP_SetStall+0x7e>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e01c      	b.n	8000f16 <HAL_PCD_EP_SetStall+0xb8>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68f9      	ldr	r1, [r7, #12]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fe27 	bl	8004b3e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d108      	bne.n	8000f0c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f003 ff4c 	bl	8004da4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	f003 020f 	and.w	r2, r3, #15
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d901      	bls.n	8000f3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e040      	b.n	8000fbe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da0e      	bge.n	8000f62 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	705a      	strb	r2, [r3, #1]
 8000f60:	e00e      	b.n	8000f80 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	f003 0207 	and.w	r2, r3, #7
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_PCD_EP_ClrStall+0x82>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e00e      	b.n	8000fbe <HAL_PCD_EP_ClrStall+0xa0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fe15 	bl	8004bde <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_PCD_EP_Flush+0x1a>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e01b      	b.n	8001018 <HAL_PCD_EP_Flush+0x52>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8000fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da09      	bge.n	8001004 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	f001 fd3b 	bl	8002a78 <USB_FlushTxFifo>
 8001002:	e004      	b.n	800100e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fd40 	bl	8002a8e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001028:	e2ec      	b.n	8001604 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001032:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001040:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001044:	2b00      	cmp	r3, #0
 8001046:	f040 8161 	bne.w	800130c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800104a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	2b00      	cmp	r3, #0
 8001052:	d152      	bne.n	80010fa <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001064:	81fb      	strh	r3, [r7, #14]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001074:	b29b      	uxth	r3, r3
 8001076:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3328      	adds	r3, #40	; 0x28
 800107c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001086:	b29b      	uxth	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	3302      	adds	r3, #2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	4413      	add	r3, r2
 800109c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	441a      	add	r2, r3
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80010b8:	2100      	movs	r1, #0
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f006 fba9 	bl	8007812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 829b 	beq.w	8001604 <PCD_EP_ISR_Handler+0x5e4>
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 8296 	bne.w	8001604 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b292      	uxth	r2, r2
 80010ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80010f8:	e284      	b.n	8001604 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800110a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800110c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001110:	2b00      	cmp	r3, #0
 8001112:	d034      	beq.n	800117e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	3306      	adds	r3, #6
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	4413      	add	r3, r2
 8001132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001152:	b29b      	uxth	r3, r3
 8001154:	f003 fe76 	bl	8004e44 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29a      	uxth	r2, r3
 8001160:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001164:	4013      	ands	r3, r2
 8001166:	823b      	strh	r3, [r7, #16]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	8a3a      	ldrh	r2, [r7, #16]
 800116e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001172:	b292      	uxth	r2, r2
 8001174:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f006 fb1e 	bl	80077b8 <HAL_PCD_SetupStageCallback>
 800117c:	e242      	b.n	8001604 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800117e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001182:	2b00      	cmp	r3, #0
 8001184:	f280 823e 	bge.w	8001604 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29a      	uxth	r2, r3
 8001190:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001194:	4013      	ands	r3, r2
 8001196:	83bb      	strh	r3, [r7, #28]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	8bba      	ldrh	r2, [r7, #28]
 800119e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011a2:	b292      	uxth	r2, r2
 80011a4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	3306      	adds	r3, #6
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d019      	beq.n	800120e <PCD_EP_ISR_Handler+0x1ee>
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d015      	beq.n	800120e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	6959      	ldr	r1, [r3, #20]
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f003 fe26 	bl	8004e44 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	441a      	add	r2, r3
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001206:	2100      	movs	r1, #0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f006 fae7 	bl	80077dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 81f2 	bne.w	8001604 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800122e:	b29b      	uxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	4413      	add	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d112      	bne.n	800126e <PCD_EP_ISR_Handler+0x24e>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001252:	b29a      	uxth	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	801a      	strh	r2, [r3, #0]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001266:	b29a      	uxth	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	e02f      	b.n	80012ce <PCD_EP_ISR_Handler+0x2ae>
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b3e      	cmp	r3, #62	; 0x3e
 8001274:	d813      	bhi.n	800129e <PCD_EP_ISR_Handler+0x27e>
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	085b      	lsrs	r3, r3, #1
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <PCD_EP_ISR_Handler+0x270>
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	3301      	adds	r3, #1
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
 8001290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001292:	b29b      	uxth	r3, r3
 8001294:	029b      	lsls	r3, r3, #10
 8001296:	b29a      	uxth	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e017      	b.n	80012ce <PCD_EP_ISR_Handler+0x2ae>
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <PCD_EP_ISR_Handler+0x298>
 80012b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b4:	3b01      	subs	r3, #1
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	b29b      	uxth	r3, r3
 80012c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80012c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012de:	827b      	strh	r3, [r7, #18]
 80012e0:	8a7b      	ldrh	r3, [r7, #18]
 80012e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80012e6:	827b      	strh	r3, [r7, #18]
 80012e8:	8a7b      	ldrh	r3, [r7, #18]
 80012ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80012ee:	827b      	strh	r3, [r7, #18]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	8a7b      	ldrh	r3, [r7, #18]
 80012f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001306:	b29b      	uxth	r3, r3
 8001308:	8013      	strh	r3, [r2, #0]
 800130a:	e17b      	b.n	8001604 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800131e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001322:	2b00      	cmp	r3, #0
 8001324:	f280 80ea 	bge.w	80014fc <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29a      	uxth	r2, r3
 800133a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800133e:	4013      	ands	r3, r2
 8001340:	853b      	strh	r3, [r7, #40]	; 0x28
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001356:	b292      	uxth	r2, r2
 8001358:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800135a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	7b1b      	ldrb	r3, [r3, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d122      	bne.n	80013be <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001380:	b29b      	uxth	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	3306      	adds	r3, #6
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	4413      	add	r3, r2
 8001396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013a0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80013a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8087 	beq.w	80014b8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	6959      	ldr	r1, [r3, #20]
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	88da      	ldrh	r2, [r3, #6]
 80013b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013b8:	f003 fd44 	bl	8004e44 <USB_ReadPMA>
 80013bc:	e07c      	b.n	80014b8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	78db      	ldrb	r3, [r3, #3]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d108      	bne.n	80013d8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80013c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013c8:	461a      	mov	r2, r3
 80013ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f927 	bl	8001620 <HAL_PCD_EP_DB_Receive>
 80013d2:	4603      	mov	r3, r0
 80013d4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80013d6:	e06f      	b.n	80014b8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80013ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	441a      	add	r2, r3
 8001402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001414:	b29b      	uxth	r3, r3
 8001416:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d021      	beq.n	8001476 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	3302      	adds	r3, #2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	4413      	add	r3, r2
 8001450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800145c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800145e:	2b00      	cmp	r3, #0
 8001460:	d02a      	beq.n	80014b8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	6959      	ldr	r1, [r3, #20]
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	891a      	ldrh	r2, [r3, #8]
 800146e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001470:	f003 fce8 	bl	8004e44 <USB_ReadPMA>
 8001474:	e020      	b.n	80014b8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	3306      	adds	r3, #6
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	4413      	add	r3, r2
 8001494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800149e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80014a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	6959      	ldr	r1, [r3, #20]
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	895a      	ldrh	r2, [r3, #10]
 80014b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014b4:	f003 fcc6 	bl	8004e44 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014be:	441a      	add	r2, r3
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014ca:	441a      	add	r2, r3
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <PCD_EP_ISR_Handler+0x4c2>
 80014d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d206      	bcs.n	80014f0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f006 f977 	bl	80077dc <HAL_PCD_DataOutStageCallback>
 80014ee:	e005      	b.n	80014fc <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 f82a 	bl	8003550 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	2b00      	cmp	r3, #0
 8001504:	d07e      	beq.n	8001604 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001506:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001534:	843b      	strh	r3, [r7, #32]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	441a      	add	r2, r3
 8001544:	8c3b      	ldrh	r3, [r7, #32]
 8001546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800154a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800154e:	b29b      	uxth	r3, r3
 8001550:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d00c      	beq.n	8001574 <PCD_EP_ISR_Handler+0x554>
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	78db      	ldrb	r3, [r3, #3]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001566:	2b02      	cmp	r3, #2
 8001568:	d146      	bne.n	80015f8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800156a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d141      	bne.n	80015f8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	3302      	adds	r3, #2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800159c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	8bfb      	ldrh	r3, [r7, #30]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d906      	bls.n	80015b6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	8bfb      	ldrh	r3, [r7, #30]
 80015ae:	1ad2      	subs	r2, r2, r3
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	e002      	b.n	80015bc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d106      	bne.n	80015d2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f006 f921 	bl	8007812 <HAL_PCD_DataInStageCallback>
 80015d0:	e018      	b.n	8001604 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	8bfb      	ldrh	r3, [r7, #30]
 80015d8:	441a      	add	r2, r3
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	8bfb      	ldrh	r3, [r7, #30]
 80015e4:	441a      	add	r2, r3
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f0:	4618      	mov	r0, r3
 80015f2:	f001 ffad 	bl	8003550 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80015f6:	e005      	b.n	8001604 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80015f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015fa:	461a      	mov	r2, r3
 80015fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f91b 	bl	800183a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160c:	b29b      	uxth	r3, r3
 800160e:	b21b      	sxth	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f6ff ad0a 	blt.w	800102a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3738      	adds	r7, #56	; 0x38
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d07e      	beq.n	8001736 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001640:	b29b      	uxth	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	3302      	adds	r3, #2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	4413      	add	r3, r2
 8001656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001660:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	8b7b      	ldrh	r3, [r7, #26]
 8001668:	429a      	cmp	r2, r3
 800166a:	d306      	bcc.n	800167a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	8b7b      	ldrh	r3, [r7, #26]
 8001672:	1ad2      	subs	r2, r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	619a      	str	r2, [r3, #24]
 8001678:	e002      	b.n	8001680 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d123      	bne.n	80016d0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800169e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a2:	833b      	strh	r3, [r7, #24]
 80016a4:	8b3b      	ldrh	r3, [r7, #24]
 80016a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016aa:	833b      	strh	r3, [r7, #24]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	441a      	add	r2, r3
 80016ba:	8b3b      	ldrh	r3, [r7, #24]
 80016bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01f      	beq.n	800171a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f4:	82fb      	strh	r3, [r7, #22]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	441a      	add	r2, r3
 8001704:	8afb      	ldrh	r3, [r7, #22]
 8001706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800170a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800170e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001712:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001716:	b29b      	uxth	r3, r3
 8001718:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800171a:	8b7b      	ldrh	r3, [r7, #26]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8087 	beq.w	8001830 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	6959      	ldr	r1, [r3, #20]
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	891a      	ldrh	r2, [r3, #8]
 800172e:	8b7b      	ldrh	r3, [r7, #26]
 8001730:	f003 fb88 	bl	8004e44 <USB_ReadPMA>
 8001734:	e07c      	b.n	8001830 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800173e:	b29b      	uxth	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	3306      	adds	r3, #6
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	4413      	add	r3, r2
 8001754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800175e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	8b7b      	ldrh	r3, [r7, #26]
 8001766:	429a      	cmp	r2, r3
 8001768:	d306      	bcc.n	8001778 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	8b7b      	ldrh	r3, [r7, #26]
 8001770:	1ad2      	subs	r2, r2, r3
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	619a      	str	r2, [r3, #24]
 8001776:	e002      	b.n	800177e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d123      	bne.n	80017ce <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800179c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a0:	83fb      	strh	r3, [r7, #30]
 80017a2:	8bfb      	ldrh	r3, [r7, #30]
 80017a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017a8:	83fb      	strh	r3, [r7, #30]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	441a      	add	r2, r3
 80017b8:	8bfb      	ldrh	r3, [r7, #30]
 80017ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11f      	bne.n	8001818 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f2:	83bb      	strh	r3, [r7, #28]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	441a      	add	r2, r3
 8001802:	8bbb      	ldrh	r3, [r7, #28]
 8001804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800180c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001814:	b29b      	uxth	r3, r3
 8001816:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001818:	8b7b      	ldrh	r3, [r7, #26]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6959      	ldr	r1, [r3, #20]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	895a      	ldrh	r2, [r3, #10]
 800182a:	8b7b      	ldrh	r3, [r7, #26]
 800182c:	f003 fb0a 	bl	8004e44 <USB_ReadPMA>
    }
  }

  return count;
 8001830:	8b7b      	ldrh	r3, [r7, #26]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b0a2      	sub	sp, #136	; 0x88
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	4613      	mov	r3, r2
 8001846:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 81c7 	beq.w	8001be2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185c:	b29b      	uxth	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	3302      	adds	r3, #2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800187c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001888:	429a      	cmp	r2, r3
 800188a:	d907      	bls.n	800189c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001894:	1ad2      	subs	r2, r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	e002      	b.n	80018a2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f040 80b9 	bne.w	8001a1e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d126      	bne.n	8001902 <HAL_PCD_EP_DB_Transmit+0xc8>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c8:	4413      	add	r3, r2
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	011a      	lsls	r2, r3, #4
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	4413      	add	r3, r2
 80018d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	801a      	strh	r2, [r3, #0]
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	801a      	strh	r2, [r3, #0]
 8001900:	e01a      	b.n	8001938 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d116      	bne.n	8001938 <HAL_PCD_EP_DB_Transmit+0xfe>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001918:	b29b      	uxth	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191e:	4413      	add	r3, r2
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	011a      	lsls	r2, r3, #4
 8001928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192a:	4413      	add	r3, r2
 800192c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	2200      	movs	r2, #0
 8001936:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	623b      	str	r3, [r7, #32]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	785b      	ldrb	r3, [r3, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d126      	bne.n	8001994 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001954:	b29b      	uxth	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	4413      	add	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	011a      	lsls	r2, r3, #4
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	4413      	add	r3, r2
 8001968:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001978:	b29a      	uxth	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800198c:	b29a      	uxth	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	e017      	b.n	80019c4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	785b      	ldrb	r3, [r3, #1]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d113      	bne.n	80019c4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	4413      	add	r3, r2
 80019ac:	623b      	str	r3, [r7, #32]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	011a      	lsls	r2, r3, #4
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	4413      	add	r3, r2
 80019b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2200      	movs	r2, #0
 80019c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f005 ff21 	bl	8007812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 82d4 	beq.w	8001f84 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f6:	827b      	strh	r3, [r7, #18]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	441a      	add	r2, r3
 8001a06:	8a7b      	ldrh	r3, [r7, #18]
 8001a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	8013      	strh	r3, [r2, #0]
 8001a1c:	e2b2      	b.n	8001f84 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d021      	beq.n	8001a6c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	441a      	add	r2, r3
 8001a54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	f040 8286 	bne.w	8001f84 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a80:	441a      	add	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a8e:	441a      	add	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d309      	bcc.n	8001ab4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aac:	1ad2      	subs	r2, r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	621a      	str	r2, [r3, #32]
 8001ab2:	e015      	b.n	8001ae0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d107      	bne.n	8001acc <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ac0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001aca:	e009      	b.n	8001ae0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d155      	bne.n	8001b94 <HAL_PCD_EP_DB_Transmit+0x35a>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afc:	4413      	add	r3, r2
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	011a      	lsls	r2, r3, #4
 8001b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b08:	4413      	add	r3, r2
 8001b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d112      	bne.n	8001b3c <HAL_PCD_EP_DB_Transmit+0x302>
 8001b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	801a      	strh	r2, [r3, #0]
 8001b3a:	e047      	b.n	8001bcc <HAL_PCD_EP_DB_Transmit+0x392>
 8001b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b40:	d811      	bhi.n	8001b66 <HAL_PCD_EP_DB_Transmit+0x32c>
 8001b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_PCD_EP_DB_Transmit+0x31e>
 8001b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b54:	3301      	adds	r3, #1
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	801a      	strh	r2, [r3, #0]
 8001b64:	e032      	b.n	8001bcc <HAL_PCD_EP_DB_Transmit+0x392>
 8001b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b68:	095b      	lsrs	r3, r3, #5
 8001b6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_PCD_EP_DB_Transmit+0x342>
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	029b      	lsls	r3, r3, #10
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	801a      	strh	r2, [r3, #0]
 8001b92:	e01b      	b.n	8001bcc <HAL_PCD_EP_DB_Transmit+0x392>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d117      	bne.n	8001bcc <HAL_PCD_EP_DB_Transmit+0x392>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb0:	4413      	add	r3, r2
 8001bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	011a      	lsls	r2, r3, #4
 8001bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6959      	ldr	r1, [r3, #20]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	891a      	ldrh	r2, [r3, #8]
 8001bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f003 f8ed 	bl	8004dba <USB_WritePMA>
 8001be0:	e1d0      	b.n	8001f84 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d307      	bcc.n	8001c2a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c22:	1ad2      	subs	r2, r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	619a      	str	r2, [r3, #24]
 8001c28:	e002      	b.n	8001c30 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 80c4 	bne.w	8001dc2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d126      	bne.n	8001c90 <HAL_PCD_EP_DB_Transmit+0x456>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c56:	4413      	add	r3, r2
 8001c58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	011a      	lsls	r2, r3, #4
 8001c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c62:	4413      	add	r3, r2
 8001c64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c68:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c8c:	801a      	strh	r2, [r3, #0]
 8001c8e:	e01a      	b.n	8001cc6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	785b      	ldrb	r3, [r3, #1]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d116      	bne.n	8001cc6 <HAL_PCD_EP_DB_Transmit+0x48c>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	677b      	str	r3, [r7, #116]	; 0x74
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cac:	4413      	add	r3, r2
 8001cae:	677b      	str	r3, [r7, #116]	; 0x74
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	011a      	lsls	r2, r3, #4
 8001cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cb8:	4413      	add	r3, r2
 8001cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8001cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d12f      	bne.n	8001d34 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cec:	4413      	add	r3, r2
 8001cee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	011a      	lsls	r2, r3, #4
 8001cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	e017      	b.n	8001d64 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	785b      	ldrb	r3, [r3, #1]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d113      	bne.n	8001d64 <HAL_PCD_EP_DB_Transmit+0x52a>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4a:	4413      	add	r3, r2
 8001d4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	011a      	lsls	r2, r3, #4
 8001d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d56:	4413      	add	r3, r2
 8001d58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d60:	2200      	movs	r2, #0
 8001d62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f005 fd51 	bl	8007812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8104 	bne.w	8001f84 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	441a      	add	r2, r3
 8001da8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	8013      	strh	r3, [r2, #0]
 8001dc0:	e0e0      	b.n	8001f84 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d121      	bne.n	8001e10 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	441a      	add	r2, r3
 8001df8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 80b4 	bne.w	8001f84 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e24:	441a      	add	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e32:	441a      	add	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d309      	bcc.n	8001e58 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	6a1a      	ldr	r2, [r3, #32]
 8001e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e50:	1ad2      	subs	r2, r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	621a      	str	r2, [r3, #32]
 8001e56:	e015      	b.n	8001e84 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8001e60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e6e:	e009      	b.n	8001e84 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	667b      	str	r3, [r7, #100]	; 0x64
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d155      	bne.n	8001f3e <HAL_PCD_EP_DB_Transmit+0x704>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ea6:	4413      	add	r3, r2
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	011a      	lsls	r2, r3, #4
 8001eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d112      	bne.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8001ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	e044      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x736>
 8001ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8001eea:	d811      	bhi.n	8001f10 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8001eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8001efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efe:	3301      	adds	r3, #1
 8001f00:	657b      	str	r3, [r7, #84]	; 0x54
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	e02f      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x736>
 8001f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	657b      	str	r3, [r7, #84]	; 0x54
 8001f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8001f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f22:	3b01      	subs	r3, #1
 8001f24:	657b      	str	r3, [r7, #84]	; 0x54
 8001f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	029b      	lsls	r3, r3, #10
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	e018      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x736>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d114      	bne.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x736>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f54:	4413      	add	r3, r2
 8001f56:	667b      	str	r3, [r7, #100]	; 0x64
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	011a      	lsls	r2, r3, #4
 8001f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f60:	4413      	add	r3, r2
 8001f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f66:	663b      	str	r3, [r7, #96]	; 0x60
 8001f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f6e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	6959      	ldr	r1, [r3, #20]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	895a      	ldrh	r2, [r3, #10]
 8001f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f002 ff1b 	bl	8004dba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f9e:	823b      	strh	r3, [r7, #16]
 8001fa0:	8a3b      	ldrh	r3, [r7, #16]
 8001fa2:	f083 0310 	eor.w	r3, r3, #16
 8001fa6:	823b      	strh	r3, [r7, #16]
 8001fa8:	8a3b      	ldrh	r3, [r7, #16]
 8001faa:	f083 0320 	eor.w	r3, r3, #32
 8001fae:	823b      	strh	r3, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	8a3b      	ldrh	r3, [r7, #16]
 8001fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3788      	adds	r7, #136	; 0x88
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	817b      	strh	r3, [r7, #10]
 8001fec:	4613      	mov	r3, r2
 8001fee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e009      	b.n	8002028 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002014:	897a      	ldrh	r2, [r7, #10]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002028:	893b      	ldrh	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2200      	movs	r2, #0
 8002032:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	b29a      	uxth	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	80da      	strh	r2, [r3, #6]
 800203c:	e00b      	b.n	8002056 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2201      	movs	r2, #1
 8002042:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	b29a      	uxth	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0c1b      	lsrs	r3, r3, #16
 8002050:	b29a      	uxth	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e26c      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00c      	beq.n	80020aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002090:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d112      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
 800209c:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d10b      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06c      	beq.n	8002190 <HAL_RCC_OscConfig+0x12c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d168      	bne.n	8002190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e246      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x76>
 80020cc:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7f      	ldr	r2, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e02e      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7a      	ldr	r2, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0xbc>
 8002106:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a71      	ldr	r2, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 8002120:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe f986 	bl	8000450 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7fe f982 	bl	8000450 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1fa      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xe4>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe f972 	bl	8000450 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe f96e 	bl	8000450 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1e6      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x10c>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1ba      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4939      	ldr	r1, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe f927 	bl	8000450 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7fe f923 	bl	8000450 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e19b      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4927      	ldr	r1, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe f906 	bl	8000450 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe f902 	bl	8000450 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e17a      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03a      	beq.n	80022e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7fe f8e6 	bl	8000450 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7fe f8e2 	bl	8000450 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e15a      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 faa6 	bl	80027f8 <RCC_Delay>
 80022ac:	e01c      	b.n	80022e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7fe f8cc 	bl	8000450 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	e00f      	b.n	80022dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7fe f8c8 	bl	8000450 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d908      	bls.n	80022dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e140      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	42420000 	.word	0x42420000
 80022d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b9e      	ldr	r3, [pc, #632]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e9      	bne.n	80022bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a6 	beq.w	8002442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b97      	ldr	r3, [pc, #604]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b94      	ldr	r3, [pc, #592]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a93      	ldr	r2, [pc, #588]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	61d3      	str	r3, [r2, #28]
 8002312:	4b91      	ldr	r3, [pc, #580]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b8e      	ldr	r3, [pc, #568]	; (800255c <HAL_RCC_OscConfig+0x4f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b8b      	ldr	r3, [pc, #556]	; (800255c <HAL_RCC_OscConfig+0x4f8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a8a      	ldr	r2, [pc, #552]	; (800255c <HAL_RCC_OscConfig+0x4f8>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7fe f889 	bl	8000450 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe f885 	bl	8000450 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0fd      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b81      	ldr	r3, [pc, #516]	; (800255c <HAL_RCC_OscConfig+0x4f8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x312>
 8002368:	4b7b      	ldr	r3, [pc, #492]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a7a      	ldr	r2, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e02d      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x334>
 800237e:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a75      	ldr	r2, [pc, #468]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b73      	ldr	r3, [pc, #460]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a72      	ldr	r2, [pc, #456]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	e01c      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0x356>
 80023a0:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a6c      	ldr	r2, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a69      	ldr	r2, [pc, #420]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a66      	ldr	r2, [pc, #408]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d015      	beq.n	8002406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7fe f839 	bl	8000450 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7fe f835 	bl	8000450 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0ab      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ee      	beq.n	80023e2 <HAL_RCC_OscConfig+0x37e>
 8002404:	e014      	b.n	8002430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe f823 	bl	8000450 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe f81f 	bl	8000450 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e095      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ee      	bne.n	800240e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b48      	ldr	r3, [pc, #288]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8081 	beq.w	800254e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d061      	beq.n	800251c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d146      	bne.n	80024ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HAL_RCC_OscConfig+0x4fc>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fd fff3 	bl	8000450 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7fd ffef 	bl	8000450 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e067      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	492d      	ldr	r1, [pc, #180]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a19      	ldr	r1, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	430b      	orrs	r3, r1
 80024ba:	4927      	ldr	r1, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b27      	ldr	r3, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x4fc>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fd ffc3 	bl	8000450 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fd ffbf 	bl	8000450 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e037      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x46a>
 80024ec:	e02f      	b.n	800254e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_RCC_OscConfig+0x4fc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fd ffac 	bl	8000450 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fd ffa8 	bl	8000450 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e020      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x498>
 800251a:	e018      	b.n	800254e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e013      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	429a      	cmp	r2, r3
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
 8002560:	42420060 	.word	0x42420060

08002564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0d0      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d910      	bls.n	80025a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b67      	ldr	r3, [pc, #412]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 0207 	bic.w	r2, r3, #7
 800258e:	4965      	ldr	r1, [pc, #404]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0b8      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a58      	ldr	r2, [pc, #352]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d8:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	494d      	ldr	r1, [pc, #308]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d040      	beq.n	8002684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d115      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e07f      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e073      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06b      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002642:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4936      	ldr	r1, [pc, #216]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002654:	f7fd fefc 	bl	8000450 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	e00a      	b.n	8002672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265c:	f7fd fef8 	bl	8000450 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e053      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 020c 	and.w	r2, r3, #12
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	429a      	cmp	r2, r3
 8002682:	d1eb      	bne.n	800265c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d210      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0207 	bic.w	r2, r3, #7
 800269a:	4922      	ldr	r1, [pc, #136]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e032      	b.n	800271a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4916      	ldr	r1, [pc, #88]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490e      	ldr	r1, [pc, #56]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f2:	f000 f821 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	490a      	ldr	r1, [pc, #40]	; (800272c <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	4a09      	ldr	r2, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1cc>)
 800270c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1d0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fe5a 	bl	80003cc <HAL_InitTick>

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40022000 	.word	0x40022000
 8002728:	40021000 	.word	0x40021000
 800272c:	08007db0 	.word	0x08007db0
 8002730:	20000000 	.word	0x20000000
 8002734:	20000004 	.word	0x20000004

08002738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002738:	b490      	push	{r4, r7}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002740:	1d3c      	adds	r4, r7, #4
 8002742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002748:	f240 2301 	movw	r3, #513	; 0x201
 800274c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d002      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x40>
 8002772:	2b08      	cmp	r3, #8
 8002774:	d003      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x46>
 8002776:	e02d      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277a:	623b      	str	r3, [r7, #32]
      break;
 800277c:	e02d      	b.n	80027da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800278a:	4413      	add	r3, r2
 800278c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002790:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	0c5b      	lsrs	r3, r3, #17
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027aa:	4413      	add	r3, r2
 80027ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b6:	fb02 f203 	mul.w	r2, r2, r3
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	623b      	str	r3, [r7, #32]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6a3b      	ldr	r3, [r7, #32]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc90      	pop	{r4, r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	08007d5c 	.word	0x08007d5c
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	003d0900 	.word	0x003d0900

080027f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <RCC_Delay+0x34>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <RCC_Delay+0x38>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0a5b      	lsrs	r3, r3, #9
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002814:	bf00      	nop
  }
  while (Delay --);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1e5a      	subs	r2, r3, #1
 800281a:	60fa      	str	r2, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f9      	bne.n	8002814 <RCC_Delay+0x1c>
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	20000000 	.word	0x20000000
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d07d      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002854:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	61d3      	str	r3, [r2, #28]
 800286c:	4b49      	ldr	r3, [pc, #292]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002878:	2301      	movs	r3, #1
 800287a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d118      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002888:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a42      	ldr	r2, [pc, #264]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002894:	f7fd fddc 	bl	8000450 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	e008      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fd fdd8 	bl	8000450 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e06d      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b3a      	ldr	r3, [pc, #232]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d02e      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d027      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028e2:	4b2e      	ldr	r3, [pc, #184]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028ee:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d014      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fd fda7 	bl	8000450 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fd fda3 	bl	8000450 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e036      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ee      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4917      	ldr	r1, [pc, #92]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	4313      	orrs	r3, r2
 8002938:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d105      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	490b      	ldr	r1, [pc, #44]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4904      	ldr	r1, [pc, #16]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	42420440 	.word	0x42420440

080029a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029a0:	b084      	sub	sp, #16
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	f107 0014 	add.w	r0, r7, #20
 80029ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	b004      	add	sp, #16
 80029be:	4770      	bx	lr

080029c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a38:	b084      	sub	sp, #16
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	f107 0014 	add.w	r0, r7, #20
 8002a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	b004      	add	sp, #16
 8002a76:	4770      	bx	lr

08002a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
	...

08002aa4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b09b      	sub	sp, #108	; 0x6c
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d81f      	bhi.n	8002b16 <USB_ActivateEndpoint+0x72>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <USB_ActivateEndpoint+0x38>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	08002b1f 	.word	0x08002b1f
 8002ae8:	08002afb 	.word	0x08002afb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002aec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002af8:	e012      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002afa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002afe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b06:	e00b      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b10:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002b14:	e004      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002b1c:	e000      	b.n	8002b20 <USB_ActivateEndpoint+0x7c>
      break;
 8002b1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	441a      	add	r2, r3
 8002b70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	7b1b      	ldrb	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 8149 	bne.w	8002e24 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8084 	beq.w	8002ca4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4413      	add	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	011a      	lsls	r2, r3, #4
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	88db      	ldrh	r3, [r3, #6]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	81fb      	strh	r3, [r7, #14]
 8002bde:	89fb      	ldrh	r3, [r7, #14]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01b      	beq.n	8002c20 <USB_ActivateEndpoint+0x17c>
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	81bb      	strh	r3, [r7, #12]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	89bb      	ldrh	r3, [r7, #12]
 8002c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	78db      	ldrb	r3, [r3, #3]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d020      	beq.n	8002c6a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3e:	813b      	strh	r3, [r7, #8]
 8002c40:	893b      	ldrh	r3, [r7, #8]
 8002c42:	f083 0320 	eor.w	r3, r3, #32
 8002c46:	813b      	strh	r3, [r7, #8]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	441a      	add	r2, r3
 8002c52:	893b      	ldrh	r3, [r7, #8]
 8002c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	8013      	strh	r3, [r2, #0]
 8002c68:	e27f      	b.n	800316a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	441a      	add	r2, r3
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]
 8002ca2:	e262      	b.n	800316a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	4413      	add	r3, r2
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	011a      	lsls	r2, r3, #4
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	88db      	ldrh	r3, [r3, #6]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	4413      	add	r3, r2
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	011a      	lsls	r2, r3, #4
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d112      	bne.n	8002d2a <USB_ActivateEndpoint+0x286>
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	e02f      	b.n	8002d8a <USB_ActivateEndpoint+0x2e6>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d30:	d813      	bhi.n	8002d5a <USB_ActivateEndpoint+0x2b6>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	663b      	str	r3, [r7, #96]	; 0x60
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <USB_ActivateEndpoint+0x2a8>
 8002d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d48:	3301      	adds	r3, #1
 8002d4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	029b      	lsls	r3, r3, #10
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	e017      	b.n	8002d8a <USB_ActivateEndpoint+0x2e6>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	663b      	str	r3, [r7, #96]	; 0x60
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <USB_ActivateEndpoint+0x2d0>
 8002d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d70:	3b01      	subs	r3, #1
 8002d72:	663b      	str	r3, [r7, #96]	; 0x60
 8002d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	83fb      	strh	r3, [r7, #30]
 8002d98:	8bfb      	ldrh	r3, [r7, #30]
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01b      	beq.n	8002dda <USB_ActivateEndpoint+0x336>
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db8:	83bb      	strh	r3, [r7, #28]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	441a      	add	r2, r3
 8002dc4:	8bbb      	ldrh	r3, [r7, #28]
 8002dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df0:	837b      	strh	r3, [r7, #26]
 8002df2:	8b7b      	ldrh	r3, [r7, #26]
 8002df4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002df8:	837b      	strh	r3, [r7, #26]
 8002dfa:	8b7b      	ldrh	r3, [r7, #26]
 8002dfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e00:	837b      	strh	r3, [r7, #26]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	8b7b      	ldrh	r3, [r7, #26]
 8002e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8013      	strh	r3, [r2, #0]
 8002e22:	e1a2      	b.n	800316a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e54:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e70:	4413      	add	r3, r2
 8002e72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	011a      	lsls	r2, r3, #4
 8002e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e82:	657b      	str	r3, [r7, #84]	; 0x54
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	891b      	ldrh	r3, [r3, #8]
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e92:	801a      	strh	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	653b      	str	r3, [r7, #80]	; 0x50
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	4413      	add	r3, r2
 8002ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	011a      	lsls	r2, r3, #4
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	895b      	ldrh	r3, [r3, #10]
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 8091 	bne.w	8002ff4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002ee0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01b      	beq.n	8002f22 <USB_ActivateEndpoint+0x47e>
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f00:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002f30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01b      	beq.n	8002f72 <USB_ActivateEndpoint+0x4ce>
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f50:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	441a      	add	r2, r3
 8002fa4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fd0:	867b      	strh	r3, [r7, #50]	; 0x32
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	8013      	strh	r3, [r2, #0]
 8002ff2:	e0ba      	b.n	800316a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003004:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01d      	beq.n	800304c <USB_ActivateEndpoint+0x5a8>
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	441a      	add	r2, r3
 8003034:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800303c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003048:	b29b      	uxth	r3, r3
 800304a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800305c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01d      	beq.n	80030a4 <USB_ActivateEndpoint+0x600>
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	441a      	add	r2, r3
 800308c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	78db      	ldrb	r3, [r3, #3]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d024      	beq.n	80030f6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030ca:	f083 0320 	eor.w	r3, r3, #32
 80030ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	441a      	add	r2, r3
 80030dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	8013      	strh	r3, [r2, #0]
 80030f4:	e01d      	b.n	8003132 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800311e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312e:	b29b      	uxth	r3, r3
 8003130:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800316a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800316e:	4618      	mov	r0, r3
 8003170:	376c      	adds	r7, #108	; 0x6c
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003178:	b480      	push	{r7}
 800317a:	b08d      	sub	sp, #52	; 0x34
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	7b1b      	ldrb	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 808e 	bne.w	80032a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	785b      	ldrb	r3, [r3, #1]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d044      	beq.n	800321e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	81bb      	strh	r3, [r7, #12]
 80031a2:	89bb      	ldrh	r3, [r7, #12]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01b      	beq.n	80031e4 <USB_DeactivateEndpoint+0x6c>
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c2:	817b      	strh	r3, [r7, #10]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fa:	813b      	strh	r3, [r7, #8]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	893b      	ldrh	r3, [r7, #8]
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]
 800321c:	e192      	b.n	8003544 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	827b      	strh	r3, [r7, #18]
 800322c:	8a7b      	ldrh	r3, [r7, #18]
 800322e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01b      	beq.n	800326e <USB_DeactivateEndpoint+0xf6>
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324c:	823b      	strh	r3, [r7, #16]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	441a      	add	r2, r3
 8003258:	8a3b      	ldrh	r3, [r7, #16]
 800325a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326a:	b29b      	uxth	r3, r3
 800326c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003284:	81fb      	strh	r3, [r7, #14]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	441a      	add	r2, r3
 8003290:	89fb      	ldrh	r3, [r7, #14]
 8003292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
 80032a6:	e14d      	b.n	8003544 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f040 80a5 	bne.w	80033fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	843b      	strh	r3, [r7, #32]
 80032c0:	8c3b      	ldrh	r3, [r7, #32]
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01b      	beq.n	8003302 <USB_DeactivateEndpoint+0x18a>
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e0:	83fb      	strh	r3, [r7, #30]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	8bfb      	ldrh	r3, [r7, #30]
 80032ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fe:	b29b      	uxth	r3, r3
 8003300:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	83bb      	strh	r3, [r7, #28]
 8003310:	8bbb      	ldrh	r3, [r7, #28]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01b      	beq.n	8003352 <USB_DeactivateEndpoint+0x1da>
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003330:	837b      	strh	r3, [r7, #26]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	441a      	add	r2, r3
 800333c:	8b7b      	ldrh	r3, [r7, #26]
 800333e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800334e:	b29b      	uxth	r3, r3
 8003350:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003368:	833b      	strh	r3, [r7, #24]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	8b3b      	ldrh	r3, [r7, #24]
 8003376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800337a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003386:	b29b      	uxth	r3, r3
 8003388:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	82fb      	strh	r3, [r7, #22]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	8afb      	ldrh	r3, [r7, #22]
 80033ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d8:	82bb      	strh	r3, [r7, #20]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	8abb      	ldrh	r3, [r7, #20]
 80033e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]
 80033fa:	e0a3      	b.n	8003544 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800340a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800340c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <USB_DeactivateEndpoint+0x2d4>
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800343c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003448:	b29b      	uxth	r3, r3
 800344a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	857b      	strh	r3, [r7, #42]	; 0x2a
 800345a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <USB_DeactivateEndpoint+0x324>
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	853b      	strh	r3, [r7, #40]	; 0x28
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	441a      	add	r2, r3
 8003486:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003494:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003498:	b29b      	uxth	r3, r3
 800349a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	441a      	add	r2, r3
 80034be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003508:	b29b      	uxth	r3, r3
 800350a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	847b      	strh	r3, [r7, #34]	; 0x22
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003540:	b29b      	uxth	r3, r3
 8003542:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3734      	adds	r7, #52	; 0x34
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b0cc      	sub	sp, #304	; 0x130
 8003554:	af00      	add	r7, sp, #0
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	6018      	str	r0, [r3, #0]
 800355a:	463b      	mov	r3, r7
 800355c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800355e:	463b      	mov	r3, r7
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 872e 	bne.w	80043c6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800356a:	463b      	mov	r3, r7
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	463b      	mov	r3, r7
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	429a      	cmp	r2, r3
 8003578:	d905      	bls.n	8003586 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800357a:	463b      	mov	r3, r7
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003584:	e004      	b.n	8003590 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003586:	463b      	mov	r3, r7
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003590:	463b      	mov	r3, r7
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	7b1b      	ldrb	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d134      	bne.n	8003604 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800359a:	463b      	mov	r3, r7
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6959      	ldr	r1, [r3, #20]
 80035a0:	463b      	mov	r3, r7
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	88da      	ldrh	r2, [r3, #6]
 80035a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	1d38      	adds	r0, r7, #4
 80035ae:	6800      	ldr	r0, [r0, #0]
 80035b0:	f001 fc03 	bl	8004dba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	1d3a      	adds	r2, r7, #4
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	f107 0210 	add.w	r2, r7, #16
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	440a      	add	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	463b      	mov	r3, r7
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	011a      	lsls	r2, r3, #4
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	f000 beac 	b.w	800435c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003604:	463b      	mov	r3, r7
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	78db      	ldrb	r3, [r3, #3]
 800360a:	2b02      	cmp	r3, #2
 800360c:	f040 838c 	bne.w	8003d28 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003610:	463b      	mov	r3, r7
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	463b      	mov	r3, r7
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	f240 8330 	bls.w	8003c82 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	463b      	mov	r3, r7
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	463b      	mov	r3, r7
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	441a      	add	r2, r3
 800364e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800365e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003662:	b29b      	uxth	r3, r3
 8003664:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003666:	463b      	mov	r3, r7
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003670:	1ad2      	subs	r2, r2, r3
 8003672:	463b      	mov	r3, r7
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	463b      	mov	r3, r7
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 819e 	beq.w	80039d0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003698:	1d3a      	adds	r2, r7, #4
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	463b      	mov	r3, r7
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d17a      	bne.n	800379e <USB_EPStartXfer+0x24e>
 80036a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ac:	1d3a      	adds	r2, r7, #4
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	440a      	add	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	463b      	mov	r3, r7
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	011a      	lsls	r2, r3, #4
 80036d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11a      	bne.n	8003724 <USB_EPStartXfer+0x1d4>
 80036ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003718:	b29a      	uxth	r2, r3
 800371a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e062      	b.n	80037ea <USB_EPStartXfer+0x29a>
 8003724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003728:	2b3e      	cmp	r3, #62	; 0x3e
 800372a:	d819      	bhi.n	8003760 <USB_EPStartXfer+0x210>
 800372c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <USB_EPStartXfer+0x1fc>
 8003742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003746:	3301      	adds	r3, #1
 8003748:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800374c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003750:	b29b      	uxth	r3, r3
 8003752:	029b      	lsls	r3, r3, #10
 8003754:	b29a      	uxth	r2, r3
 8003756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	e044      	b.n	80037ea <USB_EPStartXfer+0x29a>
 8003760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800376a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <USB_EPStartXfer+0x230>
 8003776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800377a:	3b01      	subs	r3, #1
 800377c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003780:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003784:	b29b      	uxth	r3, r3
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	b29b      	uxth	r3, r3
 800378a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800378e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003792:	b29a      	uxth	r2, r3
 8003794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	e025      	b.n	80037ea <USB_EPStartXfer+0x29a>
 800379e:	463b      	mov	r3, r7
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d120      	bne.n	80037ea <USB_EPStartXfer+0x29a>
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	440a      	add	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	463b      	mov	r3, r7
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	011a      	lsls	r2, r3, #4
 80037ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80037d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80037ea:	463b      	mov	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	895b      	ldrh	r3, [r3, #10]
 80037f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037f4:	463b      	mov	r3, r7
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6959      	ldr	r1, [r3, #20]
 80037fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003804:	1d38      	adds	r0, r7, #4
 8003806:	6800      	ldr	r0, [r0, #0]
 8003808:	f001 fad7 	bl	8004dba <USB_WritePMA>
            ep->xfer_buff += len;
 800380c:	463b      	mov	r3, r7
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003816:	441a      	add	r2, r3
 8003818:	463b      	mov	r3, r7
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800381e:	463b      	mov	r3, r7
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	463b      	mov	r3, r7
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d909      	bls.n	8003842 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800382e:	463b      	mov	r3, r7
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	463b      	mov	r3, r7
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	621a      	str	r2, [r3, #32]
 8003840:	e008      	b.n	8003854 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8003842:	463b      	mov	r3, r7
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800384c:	463b      	mov	r3, r7
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2200      	movs	r2, #0
 8003852:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003854:	463b      	mov	r3, r7
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d17a      	bne.n	8003954 <USB_EPStartXfer+0x404>
 800385e:	f107 0318 	add.w	r3, r7, #24
 8003862:	1d3a      	adds	r2, r7, #4
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003870:	b29b      	uxth	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	f107 0318 	add.w	r3, r7, #24
 8003878:	f107 0218 	add.w	r2, r7, #24
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	440a      	add	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	463b      	mov	r3, r7
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	011a      	lsls	r2, r3, #4
 800388a:	f107 0318 	add.w	r3, r7, #24
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4413      	add	r3, r2
 8003892:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003896:	f107 0314 	add.w	r3, r7, #20
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11a      	bne.n	80038da <USB_EPStartXfer+0x38a>
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e067      	b.n	80039aa <USB_EPStartXfer+0x45a>
 80038da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038de:	2b3e      	cmp	r3, #62	; 0x3e
 80038e0:	d819      	bhi.n	8003916 <USB_EPStartXfer+0x3c6>
 80038e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d004      	beq.n	8003902 <USB_EPStartXfer+0x3b2>
 80038f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003902:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003906:	b29b      	uxth	r3, r3
 8003908:	029b      	lsls	r3, r3, #10
 800390a:	b29a      	uxth	r2, r3
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	e049      	b.n	80039aa <USB_EPStartXfer+0x45a>
 8003916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <USB_EPStartXfer+0x3e6>
 800392c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003930:	3b01      	subs	r3, #1
 8003932:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003936:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800393a:	b29b      	uxth	r3, r3
 800393c:	029b      	lsls	r3, r3, #10
 800393e:	b29b      	uxth	r3, r3
 8003940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003948:	b29a      	uxth	r2, r3
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	e02a      	b.n	80039aa <USB_EPStartXfer+0x45a>
 8003954:	463b      	mov	r3, r7
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d125      	bne.n	80039aa <USB_EPStartXfer+0x45a>
 800395e:	f107 0320 	add.w	r3, r7, #32
 8003962:	1d3a      	adds	r2, r7, #4
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	4619      	mov	r1, r3
 8003974:	f107 0320 	add.w	r3, r7, #32
 8003978:	f107 0220 	add.w	r2, r7, #32
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	440a      	add	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	463b      	mov	r3, r7
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	011a      	lsls	r2, r3, #4
 800398a:	f107 0320 	add.w	r3, r7, #32
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4413      	add	r3, r2
 8003992:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003996:	f107 031c 	add.w	r3, r7, #28
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	f107 031c 	add.w	r3, r7, #28
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80039aa:	463b      	mov	r3, r7
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	891b      	ldrh	r3, [r3, #8]
 80039b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039b4:	463b      	mov	r3, r7
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6959      	ldr	r1, [r3, #20]
 80039ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80039c4:	1d38      	adds	r0, r7, #4
 80039c6:	6800      	ldr	r0, [r0, #0]
 80039c8:	f001 f9f7 	bl	8004dba <USB_WritePMA>
 80039cc:	f000 bcc6 	b.w	800435c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039d0:	463b      	mov	r3, r7
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d164      	bne.n	8003aa4 <USB_EPStartXfer+0x554>
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ee:	4413      	add	r3, r2
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f2:	463b      	mov	r3, r7
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	011a      	lsls	r2, r3, #4
 80039fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fc:	4413      	add	r3, r2
 80039fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a02:	647b      	str	r3, [r7, #68]	; 0x44
 8003a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d112      	bne.n	8003a32 <USB_EPStartXfer+0x4e2>
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e057      	b.n	8003ae2 <USB_EPStartXfer+0x592>
 8003a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a36:	2b3e      	cmp	r3, #62	; 0x3e
 8003a38:	d817      	bhi.n	8003a6a <USB_EPStartXfer+0x51a>
 8003a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <USB_EPStartXfer+0x50a>
 8003a50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a54:	3301      	adds	r3, #1
 8003a56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	029b      	lsls	r3, r3, #10
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	e03b      	b.n	8003ae2 <USB_EPStartXfer+0x592>
 8003a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d104      	bne.n	8003a8a <USB_EPStartXfer+0x53a>
 8003a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a84:	3b01      	subs	r3, #1
 8003a86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa0:	801a      	strh	r2, [r3, #0]
 8003aa2:	e01e      	b.n	8003ae2 <USB_EPStartXfer+0x592>
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d119      	bne.n	8003ae2 <USB_EPStartXfer+0x592>
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac2:	4413      	add	r3, r2
 8003ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ac6:	463b      	mov	r3, r7
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	011a      	lsls	r2, r3, #4
 8003ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	891b      	ldrh	r3, [r3, #8]
 8003ae8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003aec:	463b      	mov	r3, r7
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6959      	ldr	r1, [r3, #20]
 8003af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003afc:	1d38      	adds	r0, r7, #4
 8003afe:	6800      	ldr	r0, [r0, #0]
 8003b00:	f001 f95b 	bl	8004dba <USB_WritePMA>
            ep->xfer_buff += len;
 8003b04:	463b      	mov	r3, r7
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b0e:	441a      	add	r2, r3
 8003b10:	463b      	mov	r3, r7
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b16:	463b      	mov	r3, r7
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a1a      	ldr	r2, [r3, #32]
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d909      	bls.n	8003b3a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003b26:	463b      	mov	r3, r7
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b30:	1ad2      	subs	r2, r2, r3
 8003b32:	463b      	mov	r3, r7
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	621a      	str	r2, [r3, #32]
 8003b38:	e008      	b.n	8003b4c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b3a:	463b      	mov	r3, r7
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003b44:	463b      	mov	r3, r7
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
 8003b52:	463b      	mov	r3, r7
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d164      	bne.n	8003c26 <USB_EPStartXfer+0x6d6>
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	4413      	add	r3, r2
 8003b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b74:	463b      	mov	r3, r7
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	011a      	lsls	r2, r3, #4
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	4413      	add	r3, r2
 8003b80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
 8003b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d112      	bne.n	8003bb4 <USB_EPStartXfer+0x664>
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e054      	b.n	8003c5e <USB_EPStartXfer+0x70e>
 8003bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8003bba:	d817      	bhi.n	8003bec <USB_EPStartXfer+0x69c>
 8003bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <USB_EPStartXfer+0x68c>
 8003bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	029b      	lsls	r3, r3, #10
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e038      	b.n	8003c5e <USB_EPStartXfer+0x70e>
 8003bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <USB_EPStartXfer+0x6bc>
 8003c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c06:	3b01      	subs	r3, #1
 8003c08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	e01b      	b.n	8003c5e <USB_EPStartXfer+0x70e>
 8003c26:	463b      	mov	r3, r7
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d116      	bne.n	8003c5e <USB_EPStartXfer+0x70e>
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3e:	4413      	add	r3, r2
 8003c40:	643b      	str	r3, [r7, #64]	; 0x40
 8003c42:	463b      	mov	r3, r7
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	011a      	lsls	r2, r3, #4
 8003c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003c5e:	463b      	mov	r3, r7
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	895b      	ldrh	r3, [r3, #10]
 8003c64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c68:	463b      	mov	r3, r7
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6959      	ldr	r1, [r3, #20]
 8003c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003c78:	1d38      	adds	r0, r7, #4
 8003c7a:	6800      	ldr	r0, [r0, #0]
 8003c7c:	f001 f89d 	bl	8004dba <USB_WritePMA>
 8003c80:	e36c      	b.n	800435c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003c82:	463b      	mov	r3, r7
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003c8c:	1d3b      	adds	r3, r7, #4
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	463b      	mov	r3, r7
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003caa:	1d3b      	adds	r3, r7, #4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	463b      	mov	r3, r7
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce4:	4413      	add	r3, r2
 8003ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce8:	463b      	mov	r3, r7
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	011a      	lsls	r2, r3, #4
 8003cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003d04:	463b      	mov	r3, r7
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	891b      	ldrh	r3, [r3, #8]
 8003d0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d0e:	463b      	mov	r3, r7
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6959      	ldr	r1, [r3, #20]
 8003d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003d1e:	1d38      	adds	r0, r7, #4
 8003d20:	6800      	ldr	r0, [r0, #0]
 8003d22:	f001 f84a 	bl	8004dba <USB_WritePMA>
 8003d26:	e319      	b.n	800435c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8003d46:	1d3b      	adds	r3, r7, #4
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	441a      	add	r2, r3
 8003d54:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a1a      	ldr	r2, [r3, #32]
 8003d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d76:	1ad2      	subs	r2, r2, r3
 8003d78:	463b      	mov	r3, r7
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	463b      	mov	r3, r7
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8162 	beq.w	800405e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003da2:	463b      	mov	r3, r7
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d164      	bne.n	8003e76 <USB_EPStartXfer+0x926>
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db2:	1d3b      	adds	r3, r7, #4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc0:	4413      	add	r3, r2
 8003dc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	011a      	lsls	r2, r3, #4
 8003dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8003dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d112      	bne.n	8003e04 <USB_EPStartXfer+0x8b4>
 8003dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	801a      	strh	r2, [r3, #0]
 8003dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e057      	b.n	8003eb4 <USB_EPStartXfer+0x964>
 8003e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e08:	2b3e      	cmp	r3, #62	; 0x3e
 8003e0a:	d817      	bhi.n	8003e3c <USB_EPStartXfer+0x8ec>
 8003e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <USB_EPStartXfer+0x8dc>
 8003e22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e26:	3301      	adds	r3, #1
 8003e28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	029b      	lsls	r3, r3, #10
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	e03b      	b.n	8003eb4 <USB_EPStartXfer+0x964>
 8003e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d104      	bne.n	8003e5c <USB_EPStartXfer+0x90c>
 8003e52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e56:	3b01      	subs	r3, #1
 8003e58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003e5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	029b      	lsls	r3, r3, #10
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e01e      	b.n	8003eb4 <USB_EPStartXfer+0x964>
 8003e76:	463b      	mov	r3, r7
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d119      	bne.n	8003eb4 <USB_EPStartXfer+0x964>
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e90:	4413      	add	r3, r2
 8003e92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e96:	463b      	mov	r3, r7
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	011a      	lsls	r2, r3, #4
 8003e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003eb4:	463b      	mov	r3, r7
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	895b      	ldrh	r3, [r3, #10]
 8003eba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ebe:	463b      	mov	r3, r7
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6959      	ldr	r1, [r3, #20]
 8003ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003ece:	1d38      	adds	r0, r7, #4
 8003ed0:	6800      	ldr	r0, [r0, #0]
 8003ed2:	f000 ff72 	bl	8004dba <USB_WritePMA>
          ep->xfer_buff += len;
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ee0:	441a      	add	r2, r3
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8003ee8:	463b      	mov	r3, r7
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	463b      	mov	r3, r7
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d909      	bls.n	8003f0c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8003ef8:	463b      	mov	r3, r7
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a1a      	ldr	r2, [r3, #32]
 8003efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	463b      	mov	r3, r7
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	621a      	str	r2, [r3, #32]
 8003f0a:	e008      	b.n	8003f1e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8003f16:	463b      	mov	r3, r7
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8003f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 821a 	beq.w	800435c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f28:	463b      	mov	r3, r7
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d164      	bne.n	8003ffc <USB_EPStartXfer+0xaac>
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f46:	4413      	add	r3, r2
 8003f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	011a      	lsls	r2, r3, #4
 8003f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d112      	bne.n	8003f8a <USB_EPStartXfer+0xa3a>
 8003f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	e057      	b.n	800403a <USB_EPStartXfer+0xaea>
 8003f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f90:	d817      	bhi.n	8003fc2 <USB_EPStartXfer+0xa72>
 8003f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <USB_EPStartXfer+0xa62>
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	3301      	adds	r3, #1
 8003fae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	029b      	lsls	r3, r3, #10
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fbe:	801a      	strh	r2, [r3, #0]
 8003fc0:	e03b      	b.n	800403a <USB_EPStartXfer+0xaea>
 8003fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <USB_EPStartXfer+0xa92>
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	e01e      	b.n	800403a <USB_EPStartXfer+0xaea>
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	785b      	ldrb	r3, [r3, #1]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d119      	bne.n	800403a <USB_EPStartXfer+0xaea>
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	673b      	str	r3, [r7, #112]	; 0x70
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800401a:	4413      	add	r3, r2
 800401c:	673b      	str	r3, [r7, #112]	; 0x70
 800401e:	463b      	mov	r3, r7
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	011a      	lsls	r2, r3, #4
 8004026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004028:	4413      	add	r3, r2
 800402a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800402e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004034:	b29a      	uxth	r2, r3
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800403a:	463b      	mov	r3, r7
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	891b      	ldrh	r3, [r3, #8]
 8004040:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004044:	463b      	mov	r3, r7
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6959      	ldr	r1, [r3, #20]
 800404a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800404e:	b29b      	uxth	r3, r3
 8004050:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004054:	1d38      	adds	r0, r7, #4
 8004056:	6800      	ldr	r0, [r0, #0]
 8004058:	f000 feaf 	bl	8004dba <USB_WritePMA>
 800405c:	e17e      	b.n	800435c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800405e:	463b      	mov	r3, r7
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d16f      	bne.n	8004148 <USB_EPStartXfer+0xbf8>
 8004068:	1d3b      	adds	r3, r7, #4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004070:	1d3b      	adds	r3, r7, #4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004078:	b29b      	uxth	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004080:	4413      	add	r3, r2
 8004082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004086:	463b      	mov	r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	011a      	lsls	r2, r3, #4
 800408e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004092:	4413      	add	r3, r2
 8004094:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800409c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <USB_EPStartXfer+0xb82>
 80040a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ce:	801a      	strh	r2, [r3, #0]
 80040d0:	e05f      	b.n	8004192 <USB_EPStartXfer+0xc42>
 80040d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d6:	2b3e      	cmp	r3, #62	; 0x3e
 80040d8:	d818      	bhi.n	800410c <USB_EPStartXfer+0xbbc>
 80040da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <USB_EPStartXfer+0xbaa>
 80040f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040f4:	3301      	adds	r3, #1
 80040f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040fe:	b29b      	uxth	r3, r3
 8004100:	029b      	lsls	r3, r3, #10
 8004102:	b29a      	uxth	r2, r3
 8004104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	e042      	b.n	8004192 <USB_EPStartXfer+0xc42>
 800410c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2b00      	cmp	r3, #0
 8004120:	d104      	bne.n	800412c <USB_EPStartXfer+0xbdc>
 8004122:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004126:	3b01      	subs	r3, #1
 8004128:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800412c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004130:	b29b      	uxth	r3, r3
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	b29b      	uxth	r3, r3
 8004136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413e:	b29a      	uxth	r2, r3
 8004140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	e024      	b.n	8004192 <USB_EPStartXfer+0xc42>
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d11f      	bne.n	8004192 <USB_EPStartXfer+0xc42>
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004162:	b29b      	uxth	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800416a:	4413      	add	r3, r2
 800416c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004170:	463b      	mov	r3, r7
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	011a      	lsls	r2, r3, #4
 8004178:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800417c:	4413      	add	r3, r2
 800417e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800418a:	b29a      	uxth	r2, r3
 800418c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004190:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004192:	463b      	mov	r3, r7
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	891b      	ldrh	r3, [r3, #8]
 8004198:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800419c:	463b      	mov	r3, r7
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6959      	ldr	r1, [r3, #20]
 80041a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80041ac:	1d38      	adds	r0, r7, #4
 80041ae:	6800      	ldr	r0, [r0, #0]
 80041b0:	f000 fe03 	bl	8004dba <USB_WritePMA>
          ep->xfer_buff += len;
 80041b4:	463b      	mov	r3, r7
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041be:	441a      	add	r2, r3
 80041c0:	463b      	mov	r3, r7
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80041c6:	463b      	mov	r3, r7
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a1a      	ldr	r2, [r3, #32]
 80041cc:	463b      	mov	r3, r7
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d909      	bls.n	80041ea <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80041d6:	463b      	mov	r3, r7
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a1a      	ldr	r2, [r3, #32]
 80041dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041e0:	1ad2      	subs	r2, r2, r3
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	621a      	str	r2, [r3, #32]
 80041e8:	e008      	b.n	80041fc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80041ea:	463b      	mov	r3, r7
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80041f4:	463b      	mov	r3, r7
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80041fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80ab 	beq.w	800435c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800420e:	463b      	mov	r3, r7
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d16f      	bne.n	80042f8 <USB_EPStartXfer+0xda8>
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004228:	b29b      	uxth	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004230:	4413      	add	r3, r2
 8004232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004236:	463b      	mov	r3, r7
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	011a      	lsls	r2, r3, #4
 800423e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004242:	4413      	add	r3, r2
 8004244:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800424c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d116      	bne.n	8004282 <USB_EPStartXfer+0xd32>
 8004254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004260:	b29a      	uxth	r2, r3
 8004262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004278:	b29a      	uxth	r2, r3
 800427a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800427e:	801a      	strh	r2, [r3, #0]
 8004280:	e05b      	b.n	800433a <USB_EPStartXfer+0xdea>
 8004282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004286:	2b3e      	cmp	r3, #62	; 0x3e
 8004288:	d818      	bhi.n	80042bc <USB_EPStartXfer+0xd6c>
 800428a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <USB_EPStartXfer+0xd5a>
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	3301      	adds	r3, #1
 80042a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	029b      	lsls	r3, r3, #10
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	e03e      	b.n	800433a <USB_EPStartXfer+0xdea>
 80042bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <USB_EPStartXfer+0xd8c>
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d6:	3b01      	subs	r3, #1
 80042d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	e020      	b.n	800433a <USB_EPStartXfer+0xdea>
 80042f8:	463b      	mov	r3, r7
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d11b      	bne.n	800433a <USB_EPStartXfer+0xdea>
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004312:	4413      	add	r3, r2
 8004314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004318:	463b      	mov	r3, r7
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	011a      	lsls	r2, r3, #4
 8004320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004324:	4413      	add	r3, r2
 8004326:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800432a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800432e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004332:	b29a      	uxth	r2, r3
 8004334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004338:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800433a:	463b      	mov	r3, r7
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	895b      	ldrh	r3, [r3, #10]
 8004340:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004344:	463b      	mov	r3, r7
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6959      	ldr	r1, [r3, #20]
 800434a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800434e:	b29b      	uxth	r3, r3
 8004350:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004354:	1d38      	adds	r0, r7, #4
 8004356:	6800      	ldr	r0, [r0, #0]
 8004358:	f000 fd2f 	bl	8004dba <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	463b      	mov	r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	f107 020a 	add.w	r2, r7, #10
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437a:	8013      	strh	r3, [r2, #0]
 800437c:	f107 030a 	add.w	r3, r7, #10
 8004380:	f107 020a 	add.w	r2, r7, #10
 8004384:	8812      	ldrh	r2, [r2, #0]
 8004386:	f082 0210 	eor.w	r2, r2, #16
 800438a:	801a      	strh	r2, [r3, #0]
 800438c:	f107 030a 	add.w	r3, r7, #10
 8004390:	f107 020a 	add.w	r2, r7, #10
 8004394:	8812      	ldrh	r2, [r2, #0]
 8004396:	f082 0220 	eor.w	r2, r2, #32
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	463b      	mov	r3, r7
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	f107 030a 	add.w	r3, r7, #10
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]
 80043c4:	e3b5      	b.n	8004b32 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80043c6:	463b      	mov	r3, r7
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	7b1b      	ldrb	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f040 8090 	bne.w	80044f2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80043d2:	463b      	mov	r3, r7
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	463b      	mov	r3, r7
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d90e      	bls.n	8004400 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80043e2:	463b      	mov	r3, r7
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80043ec:	463b      	mov	r3, r7
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	463b      	mov	r3, r7
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	619a      	str	r2, [r3, #24]
 80043fe:	e008      	b.n	8004412 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004400:	463b      	mov	r3, r7
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800440a:	463b      	mov	r3, r7
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800442a:	4413      	add	r3, r2
 800442c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004430:	463b      	mov	r3, r7
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	011a      	lsls	r2, r3, #4
 8004438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800443c:	4413      	add	r3, r2
 800443e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <USB_EPStartXfer+0xf2c>
 800444e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800445a:	b29a      	uxth	r2, r3
 800445c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004472:	b29a      	uxth	r2, r3
 8004474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e32c      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
 800447c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004480:	2b3e      	cmp	r3, #62	; 0x3e
 8004482:	d818      	bhi.n	80044b6 <USB_EPStartXfer+0xf66>
 8004484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800448e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <USB_EPStartXfer+0xf54>
 800449a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800449e:	3301      	adds	r3, #1
 80044a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	e30f      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
 80044b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d104      	bne.n	80044d6 <USB_EPStartXfer+0xf86>
 80044cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044d0:	3b01      	subs	r3, #1
 80044d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80044d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044da:	b29b      	uxth	r3, r3
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	b29b      	uxth	r3, r3
 80044e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	e2f1      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80044f2:	463b      	mov	r3, r7
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	78db      	ldrb	r3, [r3, #3]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f040 818f 	bne.w	800481c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80044fe:	463b      	mov	r3, r7
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d175      	bne.n	80045f4 <USB_EPStartXfer+0x10a4>
 8004508:	1d3b      	adds	r3, r7, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004510:	1d3b      	adds	r3, r7, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004518:	b29b      	uxth	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004520:	4413      	add	r3, r2
 8004522:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004526:	463b      	mov	r3, r7
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004532:	4413      	add	r3, r2
 8004534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800453c:	463b      	mov	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <USB_EPStartXfer+0x1024>
 8004546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004552:	b29a      	uxth	r2, r3
 8004554:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456a:	b29a      	uxth	r2, r3
 800456c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e065      	b.n	8004640 <USB_EPStartXfer+0x10f0>
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b3e      	cmp	r3, #62	; 0x3e
 800457c:	d81a      	bhi.n	80045b4 <USB_EPStartXfer+0x1064>
 800457e:	463b      	mov	r3, r7
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	085b      	lsrs	r3, r3, #1
 8004586:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800458a:	463b      	mov	r3, r7
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <USB_EPStartXfer+0x1052>
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800459c:	3301      	adds	r3, #1
 800459e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	029b      	lsls	r3, r3, #10
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045b0:	801a      	strh	r2, [r3, #0]
 80045b2:	e045      	b.n	8004640 <USB_EPStartXfer+0x10f0>
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045c0:	463b      	mov	r3, r7
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d104      	bne.n	80045d8 <USB_EPStartXfer+0x1088>
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d2:	3b01      	subs	r3, #1
 80045d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045dc:	b29b      	uxth	r3, r3
 80045de:	029b      	lsls	r3, r3, #10
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045f0:	801a      	strh	r2, [r3, #0]
 80045f2:	e025      	b.n	8004640 <USB_EPStartXfer+0x10f0>
 80045f4:	463b      	mov	r3, r7
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d120      	bne.n	8004640 <USB_EPStartXfer+0x10f0>
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004606:	1d3b      	adds	r3, r7, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460e:	b29b      	uxth	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004616:	4413      	add	r3, r2
 8004618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800461c:	463b      	mov	r3, r7
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	011a      	lsls	r2, r3, #4
 8004624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004628:	4413      	add	r3, r2
 800462a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800462e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	b29a      	uxth	r2, r3
 800463a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004648:	463b      	mov	r3, r7
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d175      	bne.n	800473e <USB_EPStartXfer+0x11ee>
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800466a:	4413      	add	r3, r2
 800466c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004670:	463b      	mov	r3, r7
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	011a      	lsls	r2, r3, #4
 8004678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800467c:	4413      	add	r3, r2
 800467e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004686:	463b      	mov	r3, r7
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d116      	bne.n	80046be <USB_EPStartXfer+0x116e>
 8004690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800469c:	b29a      	uxth	r2, r3
 800469e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e061      	b.n	8004782 <USB_EPStartXfer+0x1232>
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b3e      	cmp	r3, #62	; 0x3e
 80046c6:	d81a      	bhi.n	80046fe <USB_EPStartXfer+0x11ae>
 80046c8:	463b      	mov	r3, r7
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046d4:	463b      	mov	r3, r7
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d004      	beq.n	80046ec <USB_EPStartXfer+0x119c>
 80046e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046e6:	3301      	adds	r3, #1
 80046e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	029b      	lsls	r3, r3, #10
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	e041      	b.n	8004782 <USB_EPStartXfer+0x1232>
 80046fe:	463b      	mov	r3, r7
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800470a:	463b      	mov	r3, r7
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <USB_EPStartXfer+0x11d2>
 8004718:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800471c:	3b01      	subs	r3, #1
 800471e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004722:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004726:	b29b      	uxth	r3, r3
 8004728:	029b      	lsls	r3, r3, #10
 800472a:	b29b      	uxth	r3, r3
 800472c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004734:	b29a      	uxth	r2, r3
 8004736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e021      	b.n	8004782 <USB_EPStartXfer+0x1232>
 800473e:	463b      	mov	r3, r7
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d11c      	bne.n	8004782 <USB_EPStartXfer+0x1232>
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004750:	b29b      	uxth	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004758:	4413      	add	r3, r2
 800475a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800475e:	463b      	mov	r3, r7
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	011a      	lsls	r2, r3, #4
 8004766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800476a:	4413      	add	r3, r2
 800476c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004774:	463b      	mov	r3, r7
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	b29a      	uxth	r2, r3
 800477c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004780:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004782:	463b      	mov	r3, r7
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 81a4 	beq.w	8004ad6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	463b      	mov	r3, r7
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <USB_EPStartXfer+0x126a>
 80047ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10d      	bne.n	80047d6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 8187 	bne.w	8004ad6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f040 8180 	bne.w	8004ad6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	463b      	mov	r3, r7
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80047f4:	1d3b      	adds	r3, r7, #4
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	463b      	mov	r3, r7
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004812:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]
 800481a:	e15c      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800481c:	463b      	mov	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	78db      	ldrb	r3, [r3, #3]
 8004822:	2b01      	cmp	r3, #1
 8004824:	f040 8155 	bne.w	8004ad2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004828:	463b      	mov	r3, r7
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	463b      	mov	r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	429a      	cmp	r2, r3
 8004836:	d90e      	bls.n	8004856 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004838:	463b      	mov	r3, r7
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004842:	463b      	mov	r3, r7
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484c:	1ad2      	subs	r2, r2, r3
 800484e:	463b      	mov	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	619a      	str	r2, [r3, #24]
 8004854:	e008      	b.n	8004868 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004856:	463b      	mov	r3, r7
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004860:	463b      	mov	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2200      	movs	r2, #0
 8004866:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004868:	463b      	mov	r3, r7
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	785b      	ldrb	r3, [r3, #1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d16f      	bne.n	8004952 <USB_EPStartXfer+0x1402>
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800488a:	4413      	add	r3, r2
 800488c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004890:	463b      	mov	r3, r7
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	011a      	lsls	r2, r3, #4
 8004898:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800489c:	4413      	add	r3, r2
 800489e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <USB_EPStartXfer+0x138c>
 80048ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	e05f      	b.n	800499c <USB_EPStartXfer+0x144c>
 80048dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e0:	2b3e      	cmp	r3, #62	; 0x3e
 80048e2:	d818      	bhi.n	8004916 <USB_EPStartXfer+0x13c6>
 80048e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <USB_EPStartXfer+0x13b4>
 80048fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fe:	3301      	adds	r3, #1
 8004900:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004908:	b29b      	uxth	r3, r3
 800490a:	029b      	lsls	r3, r3, #10
 800490c:	b29a      	uxth	r2, r3
 800490e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004912:	801a      	strh	r2, [r3, #0]
 8004914:	e042      	b.n	800499c <USB_EPStartXfer+0x144c>
 8004916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <USB_EPStartXfer+0x13e6>
 800492c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004930:	3b01      	subs	r3, #1
 8004932:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493a:	b29b      	uxth	r3, r3
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	b29b      	uxth	r3, r3
 8004940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004948:	b29a      	uxth	r2, r3
 800494a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	e024      	b.n	800499c <USB_EPStartXfer+0x144c>
 8004952:	463b      	mov	r3, r7
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d11f      	bne.n	800499c <USB_EPStartXfer+0x144c>
 800495c:	1d3b      	adds	r3, r7, #4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496c:	b29b      	uxth	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	4413      	add	r3, r2
 8004976:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800497a:	463b      	mov	r3, r7
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	011a      	lsls	r2, r3, #4
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	4413      	add	r3, r2
 8004988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800498c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004994:	b29a      	uxth	r2, r3
 8004996:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049a4:	463b      	mov	r3, r7
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d16f      	bne.n	8004a8e <USB_EPStartXfer+0x153e>
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c6:	4413      	add	r3, r2
 80049c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	011a      	lsls	r2, r3, #4
 80049d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d8:	4413      	add	r3, r2
 80049da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d116      	bne.n	8004a18 <USB_EPStartXfer+0x14c8>
 80049ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a14:	801a      	strh	r2, [r3, #0]
 8004a16:	e05e      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
 8004a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a1e:	d818      	bhi.n	8004a52 <USB_EPStartXfer+0x1502>
 8004a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <USB_EPStartXfer+0x14f0>
 8004a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	029b      	lsls	r3, r3, #10
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	e041      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
 8004a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <USB_EPStartXfer+0x1522>
 8004a68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	e023      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
 8004a8e:	463b      	mov	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d11e      	bne.n	8004ad6 <USB_EPStartXfer+0x1586>
 8004a98:	1d3b      	adds	r3, r7, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	011a      	lsls	r2, r3, #4
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	4413      	add	r3, r2
 8004abc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	e001      	b.n	8004ad6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e02e      	b.n	8004b34 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	463b      	mov	r3, r7
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004af4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004af8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004afc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004b00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b08:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	463b      	mov	r3, r7
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b66:	81bb      	strh	r3, [r7, #12]
 8004b68:	89bb      	ldrh	r3, [r7, #12]
 8004b6a:	f083 0310 	eor.w	r3, r3, #16
 8004b6e:	81bb      	strh	r3, [r7, #12]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	89bb      	ldrh	r3, [r7, #12]
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
 8004b90:	e01f      	b.n	8004bd2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	81fb      	strh	r3, [r7, #14]
 8004baa:	89fb      	ldrh	r3, [r7, #14]
 8004bac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bb0:	81fb      	strh	r3, [r7, #14]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	89fb      	ldrh	r3, [r7, #14]
 8004bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b087      	sub	sp, #28
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	7b1b      	ldrb	r3, [r3, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f040 809d 	bne.w	8004d2c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d04c      	beq.n	8004c94 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	823b      	strh	r3, [r7, #16]
 8004c08:	8a3b      	ldrh	r3, [r7, #16]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01b      	beq.n	8004c4a <USB_EPClearStall+0x6c>
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c28:	81fb      	strh	r3, [r7, #14]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	89fb      	ldrh	r3, [r7, #14]
 8004c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	78db      	ldrb	r3, [r3, #3]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d06c      	beq.n	8004d2c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	81bb      	strh	r3, [r7, #12]
 8004c6a:	89bb      	ldrh	r3, [r7, #12]
 8004c6c:	f083 0320 	eor.w	r3, r3, #32
 8004c70:	81bb      	strh	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	89bb      	ldrh	r3, [r7, #12]
 8004c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	8013      	strh	r3, [r2, #0]
 8004c92:	e04b      	b.n	8004d2c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	82fb      	strh	r3, [r7, #22]
 8004ca2:	8afb      	ldrh	r3, [r7, #22]
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <USB_EPClearStall+0x106>
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	82bb      	strh	r3, [r7, #20]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	8abb      	ldrh	r3, [r7, #20]
 8004cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	827b      	strh	r3, [r7, #18]
 8004cfc:	8a7b      	ldrh	r3, [r7, #18]
 8004cfe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d02:	827b      	strh	r3, [r7, #18]
 8004d04:	8a7b      	ldrh	r3, [r7, #18]
 8004d06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d0a:	827b      	strh	r3, [r7, #18]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	8a7b      	ldrh	r3, [r7, #18]
 8004d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2280      	movs	r2, #128	; 0x80
 8004d4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004d98:	68fb      	ldr	r3, [r7, #12]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr

08004dba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b08d      	sub	sp, #52	; 0x34
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	460b      	mov	r3, r1
 8004dca:	80fb      	strh	r3, [r7, #6]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	005a      	lsls	r2, r3, #1
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	e01e      	b.n	8004e32 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	3302      	adds	r3, #2
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	3301      	adds	r3, #1
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1dd      	bne.n	8004df4 <USB_WritePMA+0x3a>
  }
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	3734      	adds	r7, #52	; 0x34
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b08b      	sub	sp, #44	; 0x2c
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	460b      	mov	r3, r1
 8004e54:	80fb      	strh	r3, [r7, #6]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e5a:	88bb      	ldrh	r3, [r7, #4]
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	005a      	lsls	r2, r3, #1
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e76:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7c:	e01b      	b.n	8004eb6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	3302      	adds	r3, #2
 8004e8a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	3301      	adds	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	3302      	adds	r3, #2
 8004eae:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e0      	bne.n	8004e7e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ebc:	88bb      	ldrh	r3, [r7, #4]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	701a      	strb	r2, [r3, #0]
  }
}
 8004ed8:	bf00      	nop
 8004eda:	372c      	adds	r7, #44	; 0x2c
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7c1b      	ldrb	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d115      	bne.n	8004f22 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004efa:	2202      	movs	r2, #2
 8004efc:	2101      	movs	r1, #1
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f002 fd61 	bl	80079c6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f10:	2202      	movs	r2, #2
 8004f12:	2181      	movs	r1, #129	; 0x81
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f002 fd56 	bl	80079c6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f20:	e012      	b.n	8004f48 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	2202      	movs	r2, #2
 8004f26:	2101      	movs	r1, #1
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f002 fd4c 	bl	80079c6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	2202      	movs	r2, #2
 8004f3a:	2181      	movs	r1, #129	; 0x81
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f002 fd42 	bl	80079c6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004f48:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8004f4c:	f002 fe82 	bl	8007c54 <USBD_static_malloc>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8004f62:	2302      	movs	r3, #2
 8004f64:	e003      	b.n	8004f6e <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9da 	bl	8005320 <MSC_BOT_Init>

  return USBD_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004f82:	2101      	movs	r1, #1
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f002 fd44 	bl	8007a12 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004f92:	2181      	movs	r1, #129	; 0x81
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f002 fd3c 	bl	8007a12 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fa07 	bl	80053b4 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f002 fe58 	bl	8007c6c <USBD_static_free>
    pdev->pClassData  = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe0:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d04d      	beq.n	8005092 <USBD_MSC_Setup+0xc2>
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	f040 8113 	bne.w	8005222 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2bfe      	cmp	r3, #254	; 0xfe
 8005002:	d002      	beq.n	800500a <USBD_MSC_Setup+0x3a>
 8005004:	2bff      	cmp	r3, #255	; 0xff
 8005006:	d024      	beq.n	8005052 <USBD_MSC_Setup+0x82>
 8005008:	e03b      	b.n	8005082 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	885b      	ldrh	r3, [r3, #2]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d118      	bne.n	8005044 <USBD_MSC_Setup+0x74>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	88db      	ldrh	r3, [r3, #6]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d114      	bne.n	8005044 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005020:	2b00      	cmp	r3, #0
 8005022:	da0f      	bge.n	8005044 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	4798      	blx	r3
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2201      	movs	r2, #1
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f002 f992 	bl	8007366 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005042:	e025      	b.n	8005090 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f002 f923 	bl	8007292 <USBD_CtlError>
            ret = USBD_FAIL;
 800504c:	2302      	movs	r3, #2
 800504e:	75fb      	strb	r3, [r7, #23]
          break;
 8005050:	e01e      	b.n	8005090 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	885b      	ldrh	r3, [r3, #2]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10c      	bne.n	8005074 <USBD_MSC_Setup+0xa4>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	88db      	ldrh	r3, [r3, #6]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005068:	2b00      	cmp	r3, #0
 800506a:	db03      	blt.n	8005074 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f987 	bl	8005380 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005072:	e00d      	b.n	8005090 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f002 f90b 	bl	8007292 <USBD_CtlError>
            ret = USBD_FAIL;
 800507c:	2302      	movs	r3, #2
 800507e:	75fb      	strb	r3, [r7, #23]
          break;
 8005080:	e006      	b.n	8005090 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f002 f904 	bl	8007292 <USBD_CtlError>
          ret = USBD_FAIL;
 800508a:	2302      	movs	r3, #2
 800508c:	75fb      	strb	r3, [r7, #23]
          break;
 800508e:	bf00      	nop
      }
      break;
 8005090:	e0ce      	b.n	8005230 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b0b      	cmp	r3, #11
 8005098:	f200 80bb 	bhi.w	8005212 <USBD_MSC_Setup+0x242>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <USBD_MSC_Setup+0xd4>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	0800514b 	.word	0x0800514b
 80050ac:	08005213 	.word	0x08005213
 80050b0:	08005213 	.word	0x08005213
 80050b4:	08005213 	.word	0x08005213
 80050b8:	08005213 	.word	0x08005213
 80050bc:	08005213 	.word	0x08005213
 80050c0:	08005213 	.word	0x08005213
 80050c4:	08005213 	.word	0x08005213
 80050c8:	08005213 	.word	0x08005213
 80050cc:	080050fd 	.word	0x080050fd
 80050d0:	08005125 	.word	0x08005125
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d107      	bne.n	80050ee <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80050de:	f107 030e 	add.w	r3, r7, #14
 80050e2:	2202      	movs	r2, #2
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 f93d 	bl	8007366 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050ec:	e098      	b.n	8005220 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f002 f8ce 	bl	8007292 <USBD_CtlError>
            ret = USBD_FAIL;
 80050f6:	2302      	movs	r3, #2
 80050f8:	75fb      	strb	r3, [r7, #23]
          break;
 80050fa:	e091      	b.n	8005220 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005102:	2b03      	cmp	r3, #3
 8005104:	d107      	bne.n	8005116 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3304      	adds	r3, #4
 800510a:	2201      	movs	r2, #1
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f002 f929 	bl	8007366 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005114:	e084      	b.n	8005220 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8005116:	6839      	ldr	r1, [r7, #0]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f002 f8ba 	bl	8007292 <USBD_CtlError>
            ret = USBD_FAIL;
 800511e:	2302      	movs	r3, #2
 8005120:	75fb      	strb	r3, [r7, #23]
          break;
 8005122:	e07d      	b.n	8005220 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800512a:	2b03      	cmp	r3, #3
 800512c:	d106      	bne.n	800513c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	885b      	ldrh	r3, [r3, #2]
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800513a:	e071      	b.n	8005220 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f002 f8a7 	bl	8007292 <USBD_CtlError>
            ret = USBD_FAIL;
 8005144:	2302      	movs	r3, #2
 8005146:	75fb      	strb	r3, [r7, #23]
          break;
 8005148:	e06a      	b.n	8005220 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	889b      	ldrh	r3, [r3, #4]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f002 fc7c 	bl	8007a50 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	889b      	ldrh	r3, [r3, #4]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	4619      	mov	r1, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f002 fc56 	bl	8007a12 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	889b      	ldrh	r3, [r3, #4]
 800516a:	b25b      	sxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	da23      	bge.n	80051b8 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	889b      	ldrh	r3, [r3, #4]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3318      	adds	r3, #24
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	7c1b      	ldrb	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d107      	bne.n	80051a4 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8005194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005198:	2202      	movs	r2, #2
 800519a:	2181      	movs	r1, #129	; 0x81
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f002 fc12 	bl	80079c6 <USBD_LL_OpenEP>
 80051a2:	e005      	b.n	80051b0 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	2202      	movs	r2, #2
 80051a8:	2181      	movs	r1, #129	; 0x81
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f002 fc0b 	bl	80079c6 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80051b6:	e024      	b.n	8005202 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	889b      	ldrh	r3, [r3, #4]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7c1b      	ldrb	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80051de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051e2:	2202      	movs	r2, #2
 80051e4:	2101      	movs	r1, #1
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f002 fbed 	bl	80079c6 <USBD_LL_OpenEP>
 80051ec:	e005      	b.n	80051fa <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80051ee:	2340      	movs	r3, #64	; 0x40
 80051f0:	2202      	movs	r2, #2
 80051f2:	2101      	movs	r1, #1
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f002 fbe6 	bl	80079c6 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	889b      	ldrh	r3, [r3, #4]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa52 	bl	80056b4 <MSC_BOT_CplClrFeature>
          break;
 8005210:	e006      	b.n	8005220 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8005212:	6839      	ldr	r1, [r7, #0]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f002 f83c 	bl	8007292 <USBD_CtlError>
          ret = USBD_FAIL;
 800521a:	2302      	movs	r3, #2
 800521c:	75fb      	strb	r3, [r7, #23]
          break;
 800521e:	bf00      	nop
      }
      break;
 8005220:	e006      	b.n	8005230 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f002 f834 	bl	8007292 <USBD_CtlError>
      ret = USBD_FAIL;
 800522a:	2302      	movs	r3, #2
 800522c:	75fb      	strb	r3, [r7, #23]
      break;
 800522e:	bf00      	nop
  }

  return ret;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f8c1 	bl	80053d4 <MSC_BOT_DataIn>

  return USBD_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8e3 	bl	8005438 <MSC_BOT_DataOut>

  return USBD_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2220      	movs	r2, #32
 8005288:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800528a:	4b03      	ldr	r3, [pc, #12]	; (8005298 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000044 	.word	0x20000044

0800529c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80052aa:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000064 	.word	0x20000064

080052bc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80052ca:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000084 	.word	0x20000084

080052dc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	220a      	movs	r2, #10
 80052e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80052ea:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	200000a4 	.word	0x200000a4

080052fc <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800532e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2000      	movs	r0, #0
 8005356:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005358:	2101      	movs	r1, #1
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f002 fb78 	bl	8007a50 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005360:	2181      	movs	r1, #129	; 0x81
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f002 fb74 	bl	8007a50 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800536e:	231f      	movs	r3, #31
 8005370:	2101      	movs	r1, #1
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f002 fc37 	bl	8007be6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800538e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80053a2:	231f      	movs	r3, #31
 80053a4:	2101      	movs	r1, #1
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f002 fc1d 	bl	8007be6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c2:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	721a      	strb	r2, [r3, #8]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	7a1b      	ldrb	r3, [r3, #8]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d005      	beq.n	80053fc <MSC_BOT_DataIn+0x28>
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	db1a      	blt.n	800542a <MSC_BOT_DataIn+0x56>
 80053f4:	3b03      	subs	r3, #3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d817      	bhi.n	800542a <MSC_BOT_DataIn+0x56>
 80053fa:	e011      	b.n	8005420 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8005408:	461a      	mov	r2, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f97a 	bl	8005704 <SCSI_ProcessCmd>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	da0b      	bge.n	800542e <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005416:	2101      	movs	r1, #1
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f8f1 	bl	8005600 <MSC_BOT_SendCSW>
      }
      break;
 800541e:	e006      	b.n	800542e <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005420:	2100      	movs	r1, #0
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8ec 	bl	8005600 <MSC_BOT_SendCSW>
      break;
 8005428:	e002      	b.n	8005430 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <MSC_BOT_DataIn+0x5c>
      break;
 800542e:	bf00      	nop
  }
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	7a1b      	ldrb	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <MSC_BOT_DataOut+0x22>
 8005454:	2b01      	cmp	r3, #1
 8005456:	d004      	beq.n	8005462 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005458:	e015      	b.n	8005486 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f818 	bl	8005490 <MSC_BOT_CBW_Decode>
      break;
 8005460:	e011      	b.n	8005486 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800546e:	461a      	mov	r2, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f947 	bl	8005704 <SCSI_ProcessCmd>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	da03      	bge.n	8005484 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800547c:	2101      	movs	r1, #1
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8be 	bl	8005600 <MSC_BOT_SendCSW>
      break;
 8005484:	bf00      	nop
  }
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800549e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80054b8:	2101      	movs	r1, #1
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f002 fbb6 	bl	8007c2c <USBD_LL_GetRxDataSize>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b1f      	cmp	r3, #31
 80054c4:	d114      	bne.n	80054f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80054cc:	4a32      	ldr	r2, [pc, #200]	; (8005598 <MSC_BOT_CBW_Decode+0x108>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10e      	bne.n	80054f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d809      	bhi.n	80054f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d90e      	bls.n	800550e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80054f6:	2320      	movs	r3, #32
 80054f8:	2205      	movs	r2, #5
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fc48 	bl	8005d90 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2202      	movs	r2, #2
 8005504:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f8a6 	bl	8005658 <MSC_BOT_Abort>
 800550c:	e041      	b.n	8005592 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800551a:	461a      	mov	r2, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8f1 	bl	8005704 <SCSI_ProcessCmd>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	da0c      	bge.n	8005542 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	7a1b      	ldrb	r3, [r3, #8]
 800552c:	2b05      	cmp	r3, #5
 800552e:	d104      	bne.n	800553a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005530:	2101      	movs	r1, #1
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f864 	bl	8005600 <MSC_BOT_SendCSW>
 8005538:	e02b      	b.n	8005592 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f88c 	bl	8005658 <MSC_BOT_Abort>
 8005540:	e027      	b.n	8005592 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	7a1b      	ldrb	r3, [r3, #8]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d022      	beq.n	8005590 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800554e:	2b01      	cmp	r3, #1
 8005550:	d01e      	beq.n	8005590 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005556:	2b03      	cmp	r3, #3
 8005558:	d01a      	beq.n	8005590 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	895b      	ldrh	r3, [r3, #10]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f103 010c 	add.w	r1, r3, #12
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	895b      	ldrh	r3, [r3, #10]
 800556c:	461a      	mov	r2, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f814 	bl	800559c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005574:	e00d      	b.n	8005592 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	895b      	ldrh	r3, [r3, #10]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800557e:	2100      	movs	r1, #0
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f83d 	bl	8005600 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005586:	e004      	b.n	8005592 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f865 	bl	8005658 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800558e:	e000      	b.n	8005592 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8005590:	bf00      	nop
    }
  }
}
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	43425355 	.word	0x43425355

0800559c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d204      	bcs.n	80055c8 <MSC_BOT_SendData+0x2c>
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	e000      	b.n	80055ca <MSC_BOT_SendData+0x2e>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2204      	movs	r2, #4
 80055e8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80055ea:	8a7b      	ldrh	r3, [r7, #18]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	2181      	movs	r1, #129	; 0x81
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f002 fad5 	bl	8007ba0 <USBD_LL_Transmit>
}
 80055f6:	bf00      	nop
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005612:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a0f      	ldr	r2, [pc, #60]	; (8005654 <MSC_BOT_SendCSW+0x54>)
 8005618:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8005630:	230d      	movs	r3, #13
 8005632:	2181      	movs	r1, #129	; 0x81
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f002 fab3 	bl	8007ba0 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8005640:	231f      	movs	r3, #31
 8005642:	2101      	movs	r1, #1
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f002 face 	bl	8007be6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	53425355 	.word	0x53425355

08005658 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005666:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10c      	bne.n	800568c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8005684:	2101      	movs	r1, #1
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f002 fa01 	bl	8007a8e <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800568c:	2181      	movs	r1, #129	; 0x81
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f002 f9fd 	bl	8007a8e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	7a5b      	ldrb	r3, [r3, #9]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d107      	bne.n	80056ac <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80056a2:	231f      	movs	r3, #31
 80056a4:	2101      	movs	r1, #1
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f002 fa9d 	bl	8007be6 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	7a5b      	ldrb	r3, [r3, #9]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d107      	bne.n	80056e0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80056d0:	2181      	movs	r1, #129	; 0x81
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f002 f9db 	bl	8007a8e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	725a      	strb	r2, [r3, #9]
 80056de:	e00d      	b.n	80056fc <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80056e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	da08      	bge.n	80056fa <MSC_BOT_CplClrFeature+0x46>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	7a5b      	ldrb	r3, [r3, #9]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d004      	beq.n	80056fa <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80056f0:	2101      	movs	r1, #1
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ff84 	bl	8005600 <MSC_BOT_SendCSW>
 80056f8:	e000      	b.n	80056fc <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 80056fa:	bf00      	nop
  }
}
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	460b      	mov	r3, r1
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b5a      	cmp	r3, #90	; 0x5a
 8005718:	f200 810e 	bhi.w	8005938 <SCSI_ProcessCmd+0x234>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <SCSI_ProcessCmd+0x20>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005891 	.word	0x08005891
 8005728:	08005939 	.word	0x08005939
 800572c:	08005939 	.word	0x08005939
 8005730:	0800589f 	.word	0x0800589f
 8005734:	08005939 	.word	0x08005939
 8005738:	08005939 	.word	0x08005939
 800573c:	08005939 	.word	0x08005939
 8005740:	08005939 	.word	0x08005939
 8005744:	08005939 	.word	0x08005939
 8005748:	08005939 	.word	0x08005939
 800574c:	08005939 	.word	0x08005939
 8005750:	08005939 	.word	0x08005939
 8005754:	08005939 	.word	0x08005939
 8005758:	08005939 	.word	0x08005939
 800575c:	08005939 	.word	0x08005939
 8005760:	08005939 	.word	0x08005939
 8005764:	08005939 	.word	0x08005939
 8005768:	08005939 	.word	0x08005939
 800576c:	080058ad 	.word	0x080058ad
 8005770:	08005939 	.word	0x08005939
 8005774:	08005939 	.word	0x08005939
 8005778:	08005939 	.word	0x08005939
 800577c:	08005939 	.word	0x08005939
 8005780:	08005939 	.word	0x08005939
 8005784:	08005939 	.word	0x08005939
 8005788:	08005939 	.word	0x08005939
 800578c:	080058d7 	.word	0x080058d7
 8005790:	080058bb 	.word	0x080058bb
 8005794:	08005939 	.word	0x08005939
 8005798:	08005939 	.word	0x08005939
 800579c:	080058c9 	.word	0x080058c9
 80057a0:	08005939 	.word	0x08005939
 80057a4:	08005939 	.word	0x08005939
 80057a8:	08005939 	.word	0x08005939
 80057ac:	08005939 	.word	0x08005939
 80057b0:	080058f3 	.word	0x080058f3
 80057b4:	08005939 	.word	0x08005939
 80057b8:	08005901 	.word	0x08005901
 80057bc:	08005939 	.word	0x08005939
 80057c0:	08005939 	.word	0x08005939
 80057c4:	0800590f 	.word	0x0800590f
 80057c8:	08005939 	.word	0x08005939
 80057cc:	0800591d 	.word	0x0800591d
 80057d0:	08005939 	.word	0x08005939
 80057d4:	08005939 	.word	0x08005939
 80057d8:	08005939 	.word	0x08005939
 80057dc:	08005939 	.word	0x08005939
 80057e0:	0800592b 	.word	0x0800592b
 80057e4:	08005939 	.word	0x08005939
 80057e8:	08005939 	.word	0x08005939
 80057ec:	08005939 	.word	0x08005939
 80057f0:	08005939 	.word	0x08005939
 80057f4:	08005939 	.word	0x08005939
 80057f8:	08005939 	.word	0x08005939
 80057fc:	08005939 	.word	0x08005939
 8005800:	08005939 	.word	0x08005939
 8005804:	08005939 	.word	0x08005939
 8005808:	08005939 	.word	0x08005939
 800580c:	08005939 	.word	0x08005939
 8005810:	08005939 	.word	0x08005939
 8005814:	08005939 	.word	0x08005939
 8005818:	08005939 	.word	0x08005939
 800581c:	08005939 	.word	0x08005939
 8005820:	08005939 	.word	0x08005939
 8005824:	08005939 	.word	0x08005939
 8005828:	08005939 	.word	0x08005939
 800582c:	08005939 	.word	0x08005939
 8005830:	08005939 	.word	0x08005939
 8005834:	08005939 	.word	0x08005939
 8005838:	08005939 	.word	0x08005939
 800583c:	08005939 	.word	0x08005939
 8005840:	08005939 	.word	0x08005939
 8005844:	08005939 	.word	0x08005939
 8005848:	08005939 	.word	0x08005939
 800584c:	08005939 	.word	0x08005939
 8005850:	08005939 	.word	0x08005939
 8005854:	08005939 	.word	0x08005939
 8005858:	08005939 	.word	0x08005939
 800585c:	08005939 	.word	0x08005939
 8005860:	08005939 	.word	0x08005939
 8005864:	08005939 	.word	0x08005939
 8005868:	08005939 	.word	0x08005939
 800586c:	08005939 	.word	0x08005939
 8005870:	08005939 	.word	0x08005939
 8005874:	08005939 	.word	0x08005939
 8005878:	08005939 	.word	0x08005939
 800587c:	08005939 	.word	0x08005939
 8005880:	08005939 	.word	0x08005939
 8005884:	08005939 	.word	0x08005939
 8005888:	08005939 	.word	0x08005939
 800588c:	080058e5 	.word	0x080058e5
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4619      	mov	r1, r3
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f85c 	bl	8005954 <SCSI_TestUnitReady>
      break;
 800589c:	e055      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800589e:	7afb      	ldrb	r3, [r7, #11]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4619      	mov	r1, r3
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fa09 	bl	8005cbc <SCSI_RequestSense>
      break;
 80058aa:	e04e      	b.n	800594a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 80058ac:	7afb      	ldrb	r3, [r7, #11]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4619      	mov	r1, r3
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f888 	bl	80059c8 <SCSI_Inquiry>
      break;
 80058b8:	e047      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fa9e 	bl	8005e02 <SCSI_StartStopUnit>
      break;
 80058c6:	e040      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	4619      	mov	r1, r3
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fa97 	bl	8005e02 <SCSI_StartStopUnit>
      break;
 80058d4:	e039      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 80058d6:	7afb      	ldrb	r3, [r7, #11]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4619      	mov	r1, r3
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f99d 	bl	8005c1c <SCSI_ModeSense6>
      break;
 80058e2:	e032      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 80058e4:	7afb      	ldrb	r3, [r7, #11]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4619      	mov	r1, r3
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f9be 	bl	8005c6c <SCSI_ModeSense10>
      break;
 80058f0:	e02b      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4619      	mov	r1, r3
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f92a 	bl	8005b52 <SCSI_ReadFormatCapacity>
      break;
 80058fe:	e024      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8005900:	7afb      	ldrb	r3, [r7, #11]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4619      	mov	r1, r3
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f8bc 	bl	8005a84 <SCSI_ReadCapacity10>
      break;
 800590c:	e01d      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 800590e:	7afb      	ldrb	r3, [r7, #11]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	4619      	mov	r1, r3
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fa88 	bl	8005e2a <SCSI_Read10>
      break;
 800591a:	e016      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 800591c:	7afb      	ldrb	r3, [r7, #11]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4619      	mov	r1, r3
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fb0d 	bl	8005f42 <SCSI_Write10>
      break;
 8005928:	e00f      	b.n	800594a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4619      	mov	r1, r3
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fbb6 	bl	80060a2 <SCSI_Verify10>
      break;
 8005936:	e008      	b.n	800594a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005938:	7af9      	ldrb	r1, [r7, #11]
 800593a:	2320      	movs	r3, #32
 800593c:	2205      	movs	r2, #5
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fa26 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 8005944:	f04f 33ff 	mov.w	r3, #4294967295
 8005948:	e000      	b.n	800594c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	460b      	mov	r3, r1
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005968:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800597a:	2320      	movs	r3, #32
 800597c:	2205      	movs	r2, #5
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fa06 	bl	8005d90 <SCSI_SenseCode>

    return -1;
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
 8005988:	e019      	b.n	80059be <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	7afa      	ldrb	r2, [r7, #11]
 8005994:	4610      	mov	r0, r2
 8005996:	4798      	blx	r3
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800599e:	7af9      	ldrb	r1, [r7, #11]
 80059a0:	233a      	movs	r3, #58	; 0x3a
 80059a2:	2202      	movs	r2, #2
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f9f3 	bl	8005d90 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2205      	movs	r2, #5
 80059ae:	721a      	strb	r2, [r3, #8]

    return -1;
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	e003      	b.n	80059be <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	815a      	strh	r2, [r3, #10]

  return 0;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	460b      	mov	r3, r1
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059dc:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3301      	adds	r3, #1
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d014      	beq.n	8005a16 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80059ec:	2307      	movs	r3, #7
 80059ee:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	8bfa      	ldrh	r2, [r7, #30]
 80059f4:	815a      	strh	r2, [r3, #10]

    while (len)
 80059f6:	e00a      	b.n	8005a0e <SCSI_Inquiry+0x46>
    {
      len--;
 80059f8:	8bfb      	ldrh	r3, [r7, #30]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80059fe:	8bfa      	ldrh	r2, [r7, #30]
 8005a00:	8bfb      	ldrh	r3, [r7, #30]
 8005a02:	491f      	ldr	r1, [pc, #124]	; (8005a80 <SCSI_Inquiry+0xb8>)
 8005a04:	5c89      	ldrb	r1, [r1, r2]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4413      	add	r3, r2
 8005a0a:	460a      	mov	r2, r1
 8005a0c:	731a      	strb	r2, [r3, #12]
    while (len)
 8005a0e:	8bfb      	ldrh	r3, [r7, #30]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f1      	bne.n	80059f8 <SCSI_Inquiry+0x30>
 8005a14:	e02e      	b.n	8005a74 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a1c:	69d9      	ldr	r1, [r3, #28]
 8005a1e:	7afa      	ldrb	r2, [r7, #11]
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3305      	adds	r3, #5
 8005a36:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	8bfa      	ldrh	r2, [r7, #30]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d303      	bcc.n	8005a4e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	8bfa      	ldrh	r2, [r7, #30]
 8005a52:	815a      	strh	r2, [r3, #10]

    while (len)
 8005a54:	e00b      	b.n	8005a6e <SCSI_Inquiry+0xa6>
    {
      len--;
 8005a56:	8bfb      	ldrh	r3, [r7, #30]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8005a5c:	8bfb      	ldrh	r3, [r7, #30]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	441a      	add	r2, r3
 8005a62:	8bfb      	ldrh	r3, [r7, #30]
 8005a64:	7811      	ldrb	r1, [r2, #0]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4413      	add	r3, r2
 8005a6a:	460a      	mov	r2, r1
 8005a6c:	731a      	strb	r2, [r3, #12]
    while (len)
 8005a6e:	8bfb      	ldrh	r3, [r7, #30]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f0      	bne.n	8005a56 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3724      	adds	r7, #36	; 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr
 8005a80:	08007dc0 	.word	0x08007dc0

08005a84 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a98:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8005aae:	7af8      	ldrb	r0, [r7, #11]
 8005ab0:	4798      	blx	r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ab8:	7af9      	ldrb	r1, [r7, #11]
 8005aba:	233a      	movs	r3, #58	; 0x3a
 8005abc:	2202      	movs	r2, #2
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f966 	bl	8005d90 <SCSI_SenseCode>
    return -1;
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac8:	e03f      	b.n	8005b4a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	0e1b      	lsrs	r3, r3, #24
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005af0:	3b01      	subs	r3, #1
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005b10:	161b      	asrs	r3, r3, #24
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005b1e:	141b      	asrs	r3, r3, #16
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2208      	movs	r2, #8
 8005b46:	815a      	strh	r2, [r3, #10]
    return 0;
 8005b48:	2300      	movs	r3, #0
  }
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b088      	sub	sp, #32
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	607a      	str	r2, [r7, #4]
 8005b5e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b66:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	83fb      	strh	r3, [r7, #30]
 8005b6c:	e007      	b.n	8005b7e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8005b6e:	8bfb      	ldrh	r3, [r7, #30]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4413      	add	r3, r2
 8005b74:	2200      	movs	r2, #0
 8005b76:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8005b78:	8bfb      	ldrh	r3, [r7, #30]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	83fb      	strh	r3, [r7, #30]
 8005b7e:	8bfb      	ldrh	r3, [r7, #30]
 8005b80:	2b0b      	cmp	r3, #11
 8005b82:	d9f4      	bls.n	8005b6e <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f107 0216 	add.w	r2, r7, #22
 8005b90:	f107 0110 	add.w	r1, r7, #16
 8005b94:	7af8      	ldrb	r0, [r7, #11]
 8005b96:	4798      	blx	r3
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b9e:	7af9      	ldrb	r1, [r7, #11]
 8005ba0:	233a      	movs	r3, #58	; 0x3a
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f8f3 	bl	8005d90 <SCSI_SenseCode>
    return -1;
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bae:	e030      	b.n	8005c12 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	0e1b      	lsrs	r3, r3, #24
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	0c1b      	lsrs	r3, r3, #16
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2202      	movs	r2, #2
 8005bea:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005bec:	8afb      	ldrh	r3, [r7, #22]
 8005bee:	141b      	asrs	r3, r3, #16
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005bf6:	8afb      	ldrh	r3, [r7, #22]
 8005bf8:	0a1b      	lsrs	r3, r3, #8
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005c02:	8afb      	ldrh	r3, [r7, #22]
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	220c      	movs	r2, #12
 8005c0e:	815a      	strh	r2, [r3, #10]
    return 0;
 8005c10:	2300      	movs	r3, #0
  }
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	460b      	mov	r3, r1
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c30:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8005c32:	2308      	movs	r3, #8
 8005c34:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	8afa      	ldrh	r2, [r7, #22]
 8005c3a:	815a      	strh	r2, [r3, #10]

  while (len)
 8005c3c:	e00a      	b.n	8005c54 <SCSI_ModeSense6+0x38>
  {
    len--;
 8005c3e:	8afb      	ldrh	r3, [r7, #22]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8005c44:	8afa      	ldrh	r2, [r7, #22]
 8005c46:	8afb      	ldrh	r3, [r7, #22]
 8005c48:	4907      	ldr	r1, [pc, #28]	; (8005c68 <SCSI_ModeSense6+0x4c>)
 8005c4a:	5c89      	ldrb	r1, [r1, r2]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	460a      	mov	r2, r1
 8005c52:	731a      	strb	r2, [r3, #12]
  while (len)
 8005c54:	8afb      	ldrh	r3, [r7, #22]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f1      	bne.n	8005c3e <SCSI_ModeSense6+0x22>
  }
  return 0;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	08007dc8 	.word	0x08007dc8

08005c6c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	460b      	mov	r3, r1
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c84:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	8afa      	ldrh	r2, [r7, #22]
 8005c8a:	815a      	strh	r2, [r3, #10]

  while (len)
 8005c8c:	e00a      	b.n	8005ca4 <SCSI_ModeSense10+0x38>
  {
    len--;
 8005c8e:	8afb      	ldrh	r3, [r7, #22]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8005c94:	8afa      	ldrh	r2, [r7, #22]
 8005c96:	8afb      	ldrh	r3, [r7, #22]
 8005c98:	4907      	ldr	r1, [pc, #28]	; (8005cb8 <SCSI_ModeSense10+0x4c>)
 8005c9a:	5c89      	ldrb	r1, [r1, r2]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	731a      	strb	r2, [r3, #12]
  while (len)
 8005ca4:	8afb      	ldrh	r3, [r7, #22]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f1      	bne.n	8005c8e <SCSI_ModeSense10+0x22>
  }

  return 0;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	08007dd0 	.word	0x08007dd0

08005cbc <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd0:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	75fb      	strb	r3, [r7, #23]
 8005cd6:	e007      	b.n	8005ce8 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	2200      	movs	r2, #0
 8005ce0:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b11      	cmp	r3, #17
 8005cec:	d9f4      	bls.n	8005cd8 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2270      	movs	r2, #112	; 0x70
 8005cf2:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	220c      	movs	r2, #12
 8005cf8:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d02e      	beq.n	8005d68 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	3347      	adds	r3, #71	; 0x47
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4413      	add	r3, r2
 8005d18:	791a      	ldrb	r2, [r3, #4]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	3347      	adds	r3, #71	; 0x47
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	7a5a      	ldrb	r2, [r3, #9]
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	3347      	adds	r3, #71	; 0x47
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4413      	add	r3, r2
 8005d40:	7a1a      	ldrb	r2, [r3, #8]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d103      	bne.n	8005d68 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	2212      	movs	r2, #18
 8005d6c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b12      	cmp	r3, #18
 8005d76:	d805      	bhi.n	8005d84 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	70fb      	strb	r3, [r7, #3]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70bb      	strb	r3, [r7, #2]
 8005da6:	4613      	mov	r3, r2
 8005da8:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	3347      	adds	r3, #71	; 0x47
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	78ba      	ldrb	r2, [r7, #2]
 8005dc2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	3347      	adds	r3, #71	; 0x47
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d103      	bne.n	8005df8 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr

08005e02 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b087      	sub	sp, #28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e16:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	815a      	strh	r2, [r3, #10]
  return 0;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b086      	sub	sp, #24
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	460b      	mov	r3, r1
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	7a1b      	ldrb	r3, [r3, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d16e      	bne.n	8005f26 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005e4e:	b25b      	sxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	db0a      	blt.n	8005e6a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005e5a:	2320      	movs	r3, #32
 8005e5c:	2205      	movs	r2, #5
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff ff96 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	e067      	b.n	8005f3a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	7afa      	ldrb	r2, [r7, #11]
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005e7e:	7af9      	ldrb	r1, [r7, #11]
 8005e80:	233a      	movs	r3, #58	; 0x3a
 8005e82:	2202      	movs	r2, #2
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff ff83 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 8005e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8e:	e054      	b.n	8005f3a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3302      	adds	r3, #2
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3303      	adds	r3, #3
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005ea0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005eaa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	3205      	adds	r2, #5
 8005eb0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005eb2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3307      	adds	r3, #7
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	3208      	adds	r2, #8
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005edc:	7af9      	ldrb	r1, [r7, #11]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f912 	bl	8006108 <SCSI_CheckAddressRange>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da02      	bge.n	8005ef0 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005eea:	f04f 33ff 	mov.w	r3, #4294967295
 8005eee:	e024      	b.n	8005f3a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005f02:	6979      	ldr	r1, [r7, #20]
 8005f04:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d00a      	beq.n	8005f26 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005f16:	2320      	movs	r3, #32
 8005f18:	2205      	movs	r2, #5
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff ff38 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295
 8005f24:	e009      	b.n	8005f3a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f2c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
 8005f30:	4619      	mov	r1, r3
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f90a 	bl	800614c <SCSI_ProcessRead>
 8005f38:	4603      	mov	r3, r0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f56:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	7a1b      	ldrb	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 8096 	bne.w	800608e <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da0a      	bge.n	8005f84 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005f74:	2320      	movs	r3, #32
 8005f76:	2205      	movs	r2, #5
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f7ff ff09 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 8005f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f82:	e08a      	b.n	800609a <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	7afa      	ldrb	r2, [r7, #11]
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4798      	blx	r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f98:	7af9      	ldrb	r1, [r7, #11]
 8005f9a:	233a      	movs	r3, #58	; 0x3a
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff fef6 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa8:	e077      	b.n	800609a <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	7afa      	ldrb	r2, [r7, #11]
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4798      	blx	r3
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d008      	beq.n	8005fd0 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005fbe:	7af9      	ldrb	r1, [r7, #11]
 8005fc0:	2327      	movs	r3, #39	; 0x27
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff fee3 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 8005fca:	f04f 33ff 	mov.w	r3, #4294967295
 8005fce:	e064      	b.n	800609a <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3303      	adds	r3, #3
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005fe0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005fea:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	3205      	adds	r2, #5
 8005ff0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005ff2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3307      	adds	r3, #7
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	3208      	adds	r2, #8
 8006006:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006008:	431a      	orrs	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800601c:	7af9      	ldrb	r1, [r7, #11]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f872 	bl	8006108 <SCSI_CheckAddressRange>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	da02      	bge.n	8006030 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800602a:	f04f 33ff 	mov.w	r3, #4294967295
 800602e:	e034      	b.n	800609a <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d00a      	beq.n	8006064 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006054:	2320      	movs	r3, #32
 8006056:	2205      	movs	r2, #5
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fe99 	bl	8005d90 <SCSI_SenseCode>
      return -1;
 800605e:	f04f 33ff 	mov.w	r3, #4294967295
 8006062:	e01a      	b.n	800609a <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606a:	bf28      	it	cs
 800606c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006070:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2201      	movs	r2, #1
 8006076:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f103 020c 	add.w	r2, r3, #12
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	b29b      	uxth	r3, r3
 8006082:	2101      	movs	r1, #1
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f001 fdae 	bl	8007be6 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800608a:	2300      	movs	r3, #0
 800608c:	e005      	b.n	800609a <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800608e:	7afb      	ldrb	r3, [r7, #11]
 8006090:	4619      	mov	r1, r3
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f8ce 	bl	8006234 <SCSI_ProcessWrite>
 8006098:	4603      	mov	r3, r0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	460b      	mov	r3, r1
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b6:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3301      	adds	r3, #1
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80060c6:	7af9      	ldrb	r1, [r7, #11]
 80060c8:	2324      	movs	r3, #36	; 0x24
 80060ca:	2205      	movs	r2, #5
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff fe5f 	bl	8005d90 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	e013      	b.n	8006100 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80060e4:	7af9      	ldrb	r1, [r7, #11]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f80e 	bl	8006108 <SCSI_CheckAddressRange>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da02      	bge.n	80060f8 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
 80060f6:	e003      	b.n	8006100 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	815a      	strh	r2, [r3, #10]
  return 0;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	607a      	str	r2, [r7, #4]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	460b      	mov	r3, r1
 8006116:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	441a      	add	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800612c:	429a      	cmp	r2, r3
 800612e:	d908      	bls.n	8006142 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006130:	7af9      	ldrb	r1, [r7, #11]
 8006132:	2321      	movs	r3, #33	; 0x21
 8006134:	2205      	movs	r2, #5
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f7ff fe2a 	bl	8005d90 <SCSI_SenseCode>
    return -1;
 800613c:	f04f 33ff 	mov.w	r3, #4294967295
 8006140:	e000      	b.n	8006144 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800614c:	b590      	push	{r4, r7, lr}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	bf28      	it	cs
 800617a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800617e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006186:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800619a:	4618      	mov	r0, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	78f8      	ldrb	r0, [r7, #3]
 80061a6:	47a0      	blx	r4
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da08      	bge.n	80061c0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80061ae:	78f9      	ldrb	r1, [r7, #3]
 80061b0:	2311      	movs	r3, #17
 80061b2:	2204      	movs	r2, #4
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff fdeb 	bl	8005d90 <SCSI_SenseCode>
    return -1;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	e035      	b.n	800622c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f103 020c 	add.w	r2, r3, #12
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2181      	movs	r1, #129	; 0x81
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 fce7 	bl	8007ba0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80061de:	4619      	mov	r1, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061e6:	441a      	add	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80061fa:	4619      	mov	r1, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2203      	movs	r2, #3
 8006228:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	bd90      	pop	{r4, r7, pc}

08006234 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8006234:	b590      	push	{r4, r7, lr}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006246:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	bf28      	it	cs
 8006262:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006266:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626e:	695c      	ldr	r4, [r3, #20]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f103 010c 	add.w	r1, r3, #12
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006282:	4618      	mov	r0, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800628a:	b29b      	uxth	r3, r3
 800628c:	78f8      	ldrb	r0, [r7, #3]
 800628e:	47a0      	blx	r4
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	da08      	bge.n	80062a8 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8006296:	78f9      	ldrb	r1, [r7, #3]
 8006298:	2303      	movs	r3, #3
 800629a:	2204      	movs	r2, #4
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff fd77 	bl	8005d90 <SCSI_SenseCode>

    return -1;
 80062a2:	f04f 33ff 	mov.w	r3, #4294967295
 80062a6:	e045      	b.n	8006334 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80062b4:	4619      	mov	r1, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80062bc:	441a      	add	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80062d0:	4619      	mov	r1, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80062d8:	1ad2      	subs	r2, r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	1ad2      	subs	r2, r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80062fa:	2100      	movs	r1, #0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff f97f 	bl	8005600 <MSC_BOT_SendCSW>
 8006302:	e016      	b.n	8006332 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006318:	bf28      	it	cs
 800631a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800631e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f103 020c 	add.w	r2, r3, #12
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	b29b      	uxth	r3, r3
 800632a:	2101      	movs	r1, #1
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fc5a 	bl	8007be6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}

0800633c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006350:	2302      	movs	r3, #2
 8006352:	e01a      	b.n	800638a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	79fa      	ldrb	r2, [r7, #7]
 8006380:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f001 fab4 	bl	80078f0 <USBD_LL_Init>

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d006      	beq.n	80063b4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]
 80063b2:	e001      	b.n	80063b8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80063b4:	2302      	movs	r3, #2
 80063b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fadf 	bl	8007990 <USBD_LL_Start>

  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bc80      	pop	{r7}
 80063ee:	4770      	bx	lr

080063f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063fc:	2302      	movs	r3, #2
 80063fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00c      	beq.n	8006424 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	4611      	mov	r1, r2
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	4611      	mov	r1, r2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3

  return USBD_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fed7 	bl	800721a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800647a:	461a      	mov	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2b02      	cmp	r3, #2
 800648e:	d016      	beq.n	80064be <USBD_LL_SetupStage+0x6a>
 8006490:	2b02      	cmp	r3, #2
 8006492:	d81c      	bhi.n	80064ce <USBD_LL_SetupStage+0x7a>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <USBD_LL_SetupStage+0x4a>
 8006498:	2b01      	cmp	r3, #1
 800649a:	d008      	beq.n	80064ae <USBD_LL_SetupStage+0x5a>
 800649c:	e017      	b.n	80064ce <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9ca 	bl	8006840 <USBD_StdDevReq>
      break;
 80064ac:	e01a      	b.n	80064e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa2c 	bl	8006914 <USBD_StdItfReq>
      break;
 80064bc:	e012      	b.n	80064e4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa6c 	bl	80069a4 <USBD_StdEPReq>
      break;
 80064cc:	e00a      	b.n	80064e4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fad6 	bl	8007a8e <USBD_LL_StallEP>
      break;
 80064e2:	bf00      	nop
  }

  return USBD_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b086      	sub	sp, #24
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	460b      	mov	r3, r1
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d14b      	bne.n	800659a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006508:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006510:	2b03      	cmp	r3, #3
 8006512:	d134      	bne.n	800657e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	429a      	cmp	r2, r3
 800651e:	d919      	bls.n	8006554 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	1ad2      	subs	r2, r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006536:	429a      	cmp	r2, r3
 8006538:	d203      	bcs.n	8006542 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800653e:	b29b      	uxth	r3, r3
 8006540:	e002      	b.n	8006548 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006546:	b29b      	uxth	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 ff38 	bl	80073c2 <USBD_CtlContinueRx>
 8006552:	e038      	b.n	80065c6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006566:	2b03      	cmp	r3, #3
 8006568:	d105      	bne.n	8006576 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 ff35 	bl	80073e6 <USBD_CtlSendStatus>
 800657c:	e023      	b.n	80065c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006584:	2b05      	cmp	r3, #5
 8006586:	d11e      	bne.n	80065c6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006590:	2100      	movs	r1, #0
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f001 fa7b 	bl	8007a8e <USBD_LL_StallEP>
 8006598:	e015      	b.n	80065c6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00d      	beq.n	80065c2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d108      	bne.n	80065c2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	7afa      	ldrb	r2, [r7, #11]
 80065ba:	4611      	mov	r1, r2
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	4798      	blx	r3
 80065c0:	e001      	b.n	80065c6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065c2:	2302      	movs	r3, #2
 80065c4:	e000      	b.n	80065c8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	460b      	mov	r3, r1
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065de:	7afb      	ldrb	r3, [r7, #11]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d17f      	bne.n	80066e4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3314      	adds	r3, #20
 80065e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d15c      	bne.n	80066ae <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d915      	bls.n	800662c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	1ad2      	subs	r2, r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	b29b      	uxth	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fec0 	bl	800739e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661e:	2300      	movs	r3, #0
 8006620:	2200      	movs	r2, #0
 8006622:	2100      	movs	r1, #0
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f001 fade 	bl	8007be6 <USBD_LL_PrepareReceive>
 800662a:	e04e      	b.n	80066ca <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	6912      	ldr	r2, [r2, #16]
 8006634:	fbb3 f1f2 	udiv	r1, r3, r2
 8006638:	fb02 f201 	mul.w	r2, r2, r1
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11c      	bne.n	800667c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800664a:	429a      	cmp	r2, r3
 800664c:	d316      	bcc.n	800667c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006658:	429a      	cmp	r2, r3
 800665a:	d20f      	bcs.n	800667c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800665c:	2200      	movs	r2, #0
 800665e:	2100      	movs	r1, #0
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fe9c 	bl	800739e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800666e:	2300      	movs	r3, #0
 8006670:	2200      	movs	r2, #0
 8006672:	2100      	movs	r1, #0
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f001 fab6 	bl	8007be6 <USBD_LL_PrepareReceive>
 800667a:	e026      	b.n	80066ca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800668e:	2b03      	cmp	r3, #3
 8006690:	d105      	bne.n	800669e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800669e:	2180      	movs	r1, #128	; 0x80
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f001 f9f4 	bl	8007a8e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 feb0 	bl	800740c <USBD_CtlReceiveStatus>
 80066ac:	e00d      	b.n	80066ca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d004      	beq.n	80066c2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f001 f9e2 	bl	8007a8e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d11d      	bne.n	8006710 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fe81 	bl	80063dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066e2:	e015      	b.n	8006710 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d108      	bne.n	800670c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	7afa      	ldrb	r2, [r7, #11]
 8006704:	4611      	mov	r1, r2
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	4798      	blx	r3
 800670a:	e001      	b.n	8006710 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800670c:	2302      	movs	r3, #2
 800670e:	e000      	b.n	8006712 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3718      	adds	r7, #24
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	2200      	movs	r2, #0
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 f94c 	bl	80079c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2240      	movs	r2, #64	; 0x40
 800673a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800673e:	2340      	movs	r3, #64	; 0x40
 8006740:	2200      	movs	r2, #0
 8006742:	2180      	movs	r1, #128	; 0x80
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 f93e 	bl	80079c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2240      	movs	r2, #64	; 0x40
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6852      	ldr	r2, [r2, #4]
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	4611      	mov	r1, r2
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
  }

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr

080067ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2204      	movs	r2, #4
 80067d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d105      	bne.n	8006800 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681a:	2b03      	cmp	r3, #3
 800681c:	d10b      	bne.n	8006836 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d005      	beq.n	8006866 <USBD_StdDevReq+0x26>
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d84f      	bhi.n	80068fe <USBD_StdDevReq+0xbe>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <USBD_StdDevReq+0x36>
 8006862:	2b20      	cmp	r3, #32
 8006864:	d14b      	bne.n	80068fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
      break;
 8006874:	e048      	b.n	8006908 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b09      	cmp	r3, #9
 800687c:	d839      	bhi.n	80068f2 <USBD_StdDevReq+0xb2>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBD_StdDevReq+0x44>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068d5 	.word	0x080068d5
 8006888:	080068e9 	.word	0x080068e9
 800688c:	080068f3 	.word	0x080068f3
 8006890:	080068df 	.word	0x080068df
 8006894:	080068f3 	.word	0x080068f3
 8006898:	080068b7 	.word	0x080068b7
 800689c:	080068ad 	.word	0x080068ad
 80068a0:	080068f3 	.word	0x080068f3
 80068a4:	080068cb 	.word	0x080068cb
 80068a8:	080068c1 	.word	0x080068c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9dc 	bl	8006c6c <USBD_GetDescriptor>
          break;
 80068b4:	e022      	b.n	80068fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb3f 	bl	8006f3c <USBD_SetAddress>
          break;
 80068be:	e01d      	b.n	80068fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fb7e 	bl	8006fc4 <USBD_SetConfig>
          break;
 80068c8:	e018      	b.n	80068fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fc07 	bl	80070e0 <USBD_GetConfig>
          break;
 80068d2:	e013      	b.n	80068fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fc37 	bl	800714a <USBD_GetStatus>
          break;
 80068dc:	e00e      	b.n	80068fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fc65 	bl	80071b0 <USBD_SetFeature>
          break;
 80068e6:	e009      	b.n	80068fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fc74 	bl	80071d8 <USBD_ClrFeature>
          break;
 80068f0:	e004      	b.n	80068fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fccc 	bl	8007292 <USBD_CtlError>
          break;
 80068fa:	bf00      	nop
      }
      break;
 80068fc:	e004      	b.n	8006908 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fcc6 	bl	8007292 <USBD_CtlError>
      break;
 8006906:	bf00      	nop
  }

  return ret;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop

08006914 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d005      	beq.n	800693a <USBD_StdItfReq+0x26>
 800692e:	2b40      	cmp	r3, #64	; 0x40
 8006930:	d82e      	bhi.n	8006990 <USBD_StdItfReq+0x7c>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <USBD_StdItfReq+0x26>
 8006936:	2b20      	cmp	r3, #32
 8006938:	d12a      	bne.n	8006990 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006940:	3b01      	subs	r3, #1
 8006942:	2b02      	cmp	r3, #2
 8006944:	d81d      	bhi.n	8006982 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	889b      	ldrh	r3, [r3, #4]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	d813      	bhi.n	8006978 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d110      	bne.n	800698c <USBD_StdItfReq+0x78>
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10d      	bne.n	800698c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fd38 	bl	80073e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006976:	e009      	b.n	800698c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fc89 	bl	8007292 <USBD_CtlError>
          break;
 8006980:	e004      	b.n	800698c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc84 	bl	8007292 <USBD_CtlError>
          break;
 800698a:	e000      	b.n	800698e <USBD_StdItfReq+0x7a>
          break;
 800698c:	bf00      	nop
      }
      break;
 800698e:	e004      	b.n	800699a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fc7d 	bl	8007292 <USBD_CtlError>
      break;
 8006998:	bf00      	nop
  }

  return USBD_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	889b      	ldrh	r3, [r3, #4]
 80069b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069c0:	2b40      	cmp	r3, #64	; 0x40
 80069c2:	d007      	beq.n	80069d4 <USBD_StdEPReq+0x30>
 80069c4:	2b40      	cmp	r3, #64	; 0x40
 80069c6:	f200 8146 	bhi.w	8006c56 <USBD_StdEPReq+0x2b2>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <USBD_StdEPReq+0x40>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	f040 8141 	bne.w	8006c56 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
      break;
 80069e2:	e13d      	b.n	8006c60 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d10a      	bne.n	8006a06 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	e12d      	b.n	8006c62 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d007      	beq.n	8006a1e <USBD_StdEPReq+0x7a>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	f300 811b 	bgt.w	8006c4a <USBD_StdEPReq+0x2a6>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d072      	beq.n	8006afe <USBD_StdEPReq+0x15a>
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d03a      	beq.n	8006a92 <USBD_StdEPReq+0xee>
 8006a1c:	e115      	b.n	8006c4a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d002      	beq.n	8006a2e <USBD_StdEPReq+0x8a>
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d015      	beq.n	8006a58 <USBD_StdEPReq+0xb4>
 8006a2c:	e02b      	b.n	8006a86 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <USBD_StdEPReq+0xaa>
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
 8006a36:	2b80      	cmp	r3, #128	; 0x80
 8006a38:	d009      	beq.n	8006a4e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 f825 	bl	8007a8e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f821 	bl	8007a8e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a4c:	e020      	b.n	8006a90 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fc1e 	bl	8007292 <USBD_CtlError>
              break;
 8006a56:	e01b      	b.n	8006a90 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	885b      	ldrh	r3, [r3, #2]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10e      	bne.n	8006a7e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <USBD_StdEPReq+0xda>
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d008      	beq.n	8006a7e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	88db      	ldrh	r3, [r3, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 f808 	bl	8007a8e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fcb1 	bl	80073e6 <USBD_CtlSendStatus>

              break;
 8006a84:	e004      	b.n	8006a90 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fc02 	bl	8007292 <USBD_CtlError>
              break;
 8006a8e:	bf00      	nop
          }
          break;
 8006a90:	e0e0      	b.n	8006c54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d002      	beq.n	8006aa2 <USBD_StdEPReq+0xfe>
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d015      	beq.n	8006acc <USBD_StdEPReq+0x128>
 8006aa0:	e026      	b.n	8006af0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <USBD_StdEPReq+0x11e>
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d009      	beq.n	8006ac2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 ffeb 	bl	8007a8e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ab8:	2180      	movs	r1, #128	; 0x80
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 ffe7 	bl	8007a8e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac0:	e01c      	b.n	8006afc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fbe4 	bl	8007292 <USBD_CtlError>
              break;
 8006aca:	e017      	b.n	8006afc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	885b      	ldrh	r3, [r3, #2]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d112      	bne.n	8006afa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fff2 	bl	8007acc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc7c 	bl	80073e6 <USBD_CtlSendStatus>
              }
              break;
 8006aee:	e004      	b.n	8006afa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fbcd 	bl	8007292 <USBD_CtlError>
              break;
 8006af8:	e000      	b.n	8006afc <USBD_StdEPReq+0x158>
              break;
 8006afa:	bf00      	nop
          }
          break;
 8006afc:	e0aa      	b.n	8006c54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d002      	beq.n	8006b0e <USBD_StdEPReq+0x16a>
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d032      	beq.n	8006b72 <USBD_StdEPReq+0x1ce>
 8006b0c:	e097      	b.n	8006c3e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <USBD_StdEPReq+0x180>
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	2b80      	cmp	r3, #128	; 0x80
 8006b18:	d004      	beq.n	8006b24 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fbb8 	bl	8007292 <USBD_CtlError>
                break;
 8006b22:	e091      	b.n	8006c48 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da0b      	bge.n	8006b44 <USBD_StdEPReq+0x1a0>
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	3310      	adds	r3, #16
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	4413      	add	r3, r2
 8006b40:	3304      	adds	r3, #4
 8006b42:	e00b      	b.n	8006b5c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2202      	movs	r2, #2
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fbfb 	bl	8007366 <USBD_CtlSendData>
              break;
 8006b70:	e06a      	b.n	8006c48 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	da11      	bge.n	8006b9e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	f003 020f 	and.w	r2, r3, #15
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d117      	bne.n	8006bc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fb7b 	bl	8007292 <USBD_CtlError>
                  break;
 8006b9c:	e054      	b.n	8006c48 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ba0:	f003 020f 	and.w	r2, r3, #15
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fb68 	bl	8007292 <USBD_CtlError>
                  break;
 8006bc2:	e041      	b.n	8006c48 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	da0b      	bge.n	8006be4 <USBD_StdEPReq+0x240>
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	3310      	adds	r3, #16
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	3304      	adds	r3, #4
 8006be2:	e00b      	b.n	8006bfc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <USBD_StdEPReq+0x266>
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b80      	cmp	r3, #128	; 0x80
 8006c08:	d103      	bne.n	8006c12 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e00e      	b.n	8006c30 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 ff77 	bl	8007b0a <USBD_LL_IsStallEP>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e002      	b.n	8006c30 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2202      	movs	r2, #2
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fb95 	bl	8007366 <USBD_CtlSendData>
              break;
 8006c3c:	e004      	b.n	8006c48 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fb26 	bl	8007292 <USBD_CtlError>
              break;
 8006c46:	bf00      	nop
          }
          break;
 8006c48:	e004      	b.n	8006c54 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fb20 	bl	8007292 <USBD_CtlError>
          break;
 8006c52:	bf00      	nop
      }
      break;
 8006c54:	e004      	b.n	8006c60 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fb1a 	bl	8007292 <USBD_CtlError>
      break;
 8006c5e:	bf00      	nop
  }

  return ret;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	885b      	ldrh	r3, [r3, #2]
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	2b06      	cmp	r3, #6
 8006c8e:	f200 8128 	bhi.w	8006ee2 <USBD_GetDescriptor+0x276>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <USBD_GetDescriptor+0x2c>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cb5 	.word	0x08006cb5
 8006c9c:	08006ccd 	.word	0x08006ccd
 8006ca0:	08006d0d 	.word	0x08006d0d
 8006ca4:	08006ee3 	.word	0x08006ee3
 8006ca8:	08006ee3 	.word	0x08006ee3
 8006cac:	08006e83 	.word	0x08006e83
 8006cb0:	08006eaf 	.word	0x08006eaf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7c12      	ldrb	r2, [r2, #16]
 8006cc0:	f107 0108 	add.w	r1, r7, #8
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
 8006cc8:	60f8      	str	r0, [r7, #12]
      break;
 8006cca:	e112      	b.n	8006ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7c1b      	ldrb	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10d      	bne.n	8006cf0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f107 0208 	add.w	r2, r7, #8
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	2202      	movs	r2, #2
 8006cec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cee:	e100      	b.n	8006ef2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	f107 0208 	add.w	r2, r7, #8
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	2202      	movs	r2, #2
 8006d08:	701a      	strb	r2, [r3, #0]
      break;
 8006d0a:	e0f2      	b.n	8006ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	885b      	ldrh	r3, [r3, #2]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b05      	cmp	r3, #5
 8006d14:	f200 80ac 	bhi.w	8006e70 <USBD_GetDescriptor+0x204>
 8006d18:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <USBD_GetDescriptor+0xb4>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d39 	.word	0x08006d39
 8006d24:	08006d6d 	.word	0x08006d6d
 8006d28:	08006da1 	.word	0x08006da1
 8006d2c:	08006dd5 	.word	0x08006dd5
 8006d30:	08006e09 	.word	0x08006e09
 8006d34:	08006e3d 	.word	0x08006e3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	7c12      	ldrb	r2, [r2, #16]
 8006d50:	f107 0108 	add.w	r1, r7, #8
 8006d54:	4610      	mov	r0, r2
 8006d56:	4798      	blx	r3
 8006d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5a:	e091      	b.n	8006e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa97 	bl	8007292 <USBD_CtlError>
            err++;
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	3301      	adds	r3, #1
 8006d68:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6a:	e089      	b.n	8006e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	7c12      	ldrb	r2, [r2, #16]
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
 8006d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d8e:	e077      	b.n	8006e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa7d 	bl	8007292 <USBD_CtlError>
            err++;
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d9e:	e06f      	b.n	8006e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	7c12      	ldrb	r2, [r2, #16]
 8006db8:	f107 0108 	add.w	r1, r7, #8
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4798      	blx	r3
 8006dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc2:	e05d      	b.n	8006e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa63 	bl	8007292 <USBD_CtlError>
            err++;
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd2:	e055      	b.n	8006e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7c12      	ldrb	r2, [r2, #16]
 8006dec:	f107 0108 	add.w	r1, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df6:	e043      	b.n	8006e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa49 	bl	8007292 <USBD_CtlError>
            err++;
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	3301      	adds	r3, #1
 8006e04:	72fb      	strb	r3, [r7, #11]
          break;
 8006e06:	e03b      	b.n	8006e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 0108 	add.w	r1, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2a:	e029      	b.n	8006e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa2f 	bl	8007292 <USBD_CtlError>
            err++;
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	3301      	adds	r3, #1
 8006e38:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3a:	e021      	b.n	8006e80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5e:	e00f      	b.n	8006e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa15 	bl	8007292 <USBD_CtlError>
            err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6e:	e007      	b.n	8006e80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa0d 	bl	8007292 <USBD_CtlError>
          err++;
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006e7e:	e038      	b.n	8006ef2 <USBD_GetDescriptor+0x286>
 8006e80:	e037      	b.n	8006ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	7c1b      	ldrb	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d109      	bne.n	8006e9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e92:	f107 0208 	add.w	r2, r7, #8
 8006e96:	4610      	mov	r0, r2
 8006e98:	4798      	blx	r3
 8006e9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e9c:	e029      	b.n	8006ef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f9f6 	bl	8007292 <USBD_CtlError>
        err++;
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	72fb      	strb	r3, [r7, #11]
      break;
 8006eac:	e021      	b.n	8006ef2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7c1b      	ldrb	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10d      	bne.n	8006ed2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	f107 0208 	add.w	r2, r7, #8
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4798      	blx	r3
 8006ec6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	2207      	movs	r2, #7
 8006ece:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed0:	e00f      	b.n	8006ef2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f9dc 	bl	8007292 <USBD_CtlError>
        err++;
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	3301      	adds	r3, #1
 8006ede:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee0:	e007      	b.n	8006ef2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9d4 	bl	8007292 <USBD_CtlError>
      err++;
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	3301      	adds	r3, #1
 8006eee:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef0:	bf00      	nop
  }

  if (err != 0U)
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11c      	bne.n	8006f32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ef8:	893b      	ldrh	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d011      	beq.n	8006f22 <USBD_GetDescriptor+0x2b6>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	88db      	ldrh	r3, [r3, #6]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00d      	beq.n	8006f22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88da      	ldrh	r2, [r3, #6]
 8006f0a:	893b      	ldrh	r3, [r7, #8]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	bf28      	it	cs
 8006f10:	4613      	movcs	r3, r2
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f16:	893b      	ldrh	r3, [r7, #8]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fa22 	bl	8007366 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	88db      	ldrh	r3, [r3, #6]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa5b 	bl	80073e6 <USBD_CtlSendStatus>
 8006f30:	e000      	b.n	8006f34 <USBD_GetDescriptor+0x2c8>
    return;
 8006f32:	bf00      	nop
    }
  }
}
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop

08006f3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d130      	bne.n	8006fb0 <USBD_SetAddress+0x74>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88db      	ldrh	r3, [r3, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d12c      	bne.n	8006fb0 <USBD_SetAddress+0x74>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f5c:	d828      	bhi.n	8006fb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d104      	bne.n	8006f7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f98b 	bl	8007292 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7c:	e01d      	b.n	8006fba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	7bfa      	ldrb	r2, [r7, #15]
 8006f82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fde9 	bl	8007b62 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fa28 	bl	80073e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa4:	e009      	b.n	8006fba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fae:	e004      	b.n	8006fba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f96d 	bl	8007292 <USBD_CtlError>
  }
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	4b41      	ldr	r3, [pc, #260]	; (80070dc <USBD_SetConfig+0x118>)
 8006fd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fd8:	4b40      	ldr	r3, [pc, #256]	; (80070dc <USBD_SetConfig+0x118>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d904      	bls.n	8006fea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f955 	bl	8007292 <USBD_CtlError>
 8006fe8:	e075      	b.n	80070d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d002      	beq.n	8006ffa <USBD_SetConfig+0x36>
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d023      	beq.n	8007040 <USBD_SetConfig+0x7c>
 8006ff8:	e062      	b.n	80070c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006ffa:	4b38      	ldr	r3, [pc, #224]	; (80070dc <USBD_SetConfig+0x118>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d01a      	beq.n	8007038 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007002:	4b36      	ldr	r3, [pc, #216]	; (80070dc <USBD_SetConfig+0x118>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2203      	movs	r2, #3
 8007010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007014:	4b31      	ldr	r3, [pc, #196]	; (80070dc <USBD_SetConfig+0x118>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff f9e8 	bl	80063f0 <USBD_SetClassConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	2b02      	cmp	r3, #2
 8007024:	d104      	bne.n	8007030 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f932 	bl	8007292 <USBD_CtlError>
            return;
 800702e:	e052      	b.n	80070d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9d8 	bl	80073e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007036:	e04e      	b.n	80070d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9d4 	bl	80073e6 <USBD_CtlSendStatus>
        break;
 800703e:	e04a      	b.n	80070d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007040:	4b26      	ldr	r3, [pc, #152]	; (80070dc <USBD_SetConfig+0x118>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d112      	bne.n	800706e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007050:	4b22      	ldr	r3, [pc, #136]	; (80070dc <USBD_SetConfig+0x118>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800705a:	4b20      	ldr	r3, [pc, #128]	; (80070dc <USBD_SetConfig+0x118>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff f9e4 	bl	800642e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9bd 	bl	80073e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800706c:	e033      	b.n	80070d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <USBD_SetConfig+0x118>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d01d      	beq.n	80070b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff f9d2 	bl	800642e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <USBD_SetConfig+0x118>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007094:	4b11      	ldr	r3, [pc, #68]	; (80070dc <USBD_SetConfig+0x118>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff f9a8 	bl	80063f0 <USBD_SetClassConfig>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d104      	bne.n	80070b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f8f2 	bl	8007292 <USBD_CtlError>
            return;
 80070ae:	e012      	b.n	80070d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f998 	bl	80073e6 <USBD_CtlSendStatus>
        break;
 80070b6:	e00e      	b.n	80070d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f994 	bl	80073e6 <USBD_CtlSendStatus>
        break;
 80070be:	e00a      	b.n	80070d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8e5 	bl	8007292 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80070c8:	4b04      	ldr	r3, [pc, #16]	; (80070dc <USBD_SetConfig+0x118>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff f9ad 	bl	800642e <USBD_ClrClassConfig>
        break;
 80070d4:	bf00      	nop
    }
  }
}
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	2000013c 	.word	0x2000013c

080070e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	88db      	ldrh	r3, [r3, #6]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d004      	beq.n	80070fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f8cc 	bl	8007292 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070fa:	e022      	b.n	8007142 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007102:	2b02      	cmp	r3, #2
 8007104:	dc02      	bgt.n	800710c <USBD_GetConfig+0x2c>
 8007106:	2b00      	cmp	r3, #0
 8007108:	dc03      	bgt.n	8007112 <USBD_GetConfig+0x32>
 800710a:	e015      	b.n	8007138 <USBD_GetConfig+0x58>
 800710c:	2b03      	cmp	r3, #3
 800710e:	d00b      	beq.n	8007128 <USBD_GetConfig+0x48>
 8007110:	e012      	b.n	8007138 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3308      	adds	r3, #8
 800711c:	2201      	movs	r2, #1
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f920 	bl	8007366 <USBD_CtlSendData>
        break;
 8007126:	e00c      	b.n	8007142 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	2201      	movs	r2, #1
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f918 	bl	8007366 <USBD_CtlSendData>
        break;
 8007136:	e004      	b.n	8007142 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f8a9 	bl	8007292 <USBD_CtlError>
        break;
 8007140:	bf00      	nop
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800715a:	3b01      	subs	r3, #1
 800715c:	2b02      	cmp	r3, #2
 800715e:	d81e      	bhi.n	800719e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	88db      	ldrh	r3, [r3, #6]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d004      	beq.n	8007172 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f891 	bl	8007292 <USBD_CtlError>
        break;
 8007170:	e01a      	b.n	80071a8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f043 0202 	orr.w	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	330c      	adds	r3, #12
 8007192:	2202      	movs	r2, #2
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8e5 	bl	8007366 <USBD_CtlSendData>
      break;
 800719c:	e004      	b.n	80071a8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f876 	bl	8007292 <USBD_CtlError>
      break;
 80071a6:	bf00      	nop
  }
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	885b      	ldrh	r3, [r3, #2]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d106      	bne.n	80071d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f90b 	bl	80073e6 <USBD_CtlSendStatus>
  }
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e8:	3b01      	subs	r3, #1
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d80b      	bhi.n	8007206 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	885b      	ldrh	r3, [r3, #2]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d10c      	bne.n	8007210 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8f1 	bl	80073e6 <USBD_CtlSendStatus>
      }
      break;
 8007204:	e004      	b.n	8007210 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f842 	bl	8007292 <USBD_CtlError>
      break;
 800720e:	e000      	b.n	8007212 <USBD_ClrFeature+0x3a>
      break;
 8007210:	bf00      	nop
  }
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	785a      	ldrb	r2, [r3, #1]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	3302      	adds	r3, #2
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b29a      	uxth	r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	3303      	adds	r3, #3
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	b29b      	uxth	r3, r3
 8007248:	4413      	add	r3, r2
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	3304      	adds	r3, #4
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b29a      	uxth	r2, r3
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	3305      	adds	r3, #5
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b29b      	uxth	r3, r3
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	b29b      	uxth	r3, r3
 8007264:	4413      	add	r3, r2
 8007266:	b29a      	uxth	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	3306      	adds	r3, #6
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	b29a      	uxth	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	3307      	adds	r3, #7
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	b29b      	uxth	r3, r3
 8007280:	4413      	add	r3, r2
 8007282:	b29a      	uxth	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	80da      	strh	r2, [r3, #6]

}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr

08007292 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800729c:	2180      	movs	r1, #128	; 0x80
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fbf5 	bl	8007a8e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80072a4:	2100      	movs	r1, #0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fbf1 	bl	8007a8e <USBD_LL_StallEP>
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d032      	beq.n	8007330 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f834 	bl	8007338 <USBD_GetLen>
 80072d0:	4603      	mov	r3, r0
 80072d2:	3301      	adds	r3, #1
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	75fa      	strb	r2, [r7, #23]
 80072e4:	461a      	mov	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4413      	add	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	75fa      	strb	r2, [r7, #23]
 80072f6:	461a      	mov	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4413      	add	r3, r2
 80072fc:	2203      	movs	r2, #3
 80072fe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007300:	e012      	b.n	8007328 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	60fa      	str	r2, [r7, #12]
 8007308:	7dfa      	ldrb	r2, [r7, #23]
 800730a:	1c51      	adds	r1, r2, #1
 800730c:	75f9      	strb	r1, [r7, #23]
 800730e:	4611      	mov	r1, r2
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	440a      	add	r2, r1
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	75fa      	strb	r2, [r7, #23]
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4413      	add	r3, r2
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e8      	bne.n	8007302 <USBD_GetString+0x4e>
    }
  }
}
 8007330:	bf00      	nop
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007344:	e005      	b.n	8007352 <USBD_GetLen+0x1a>
  {
    len++;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	3301      	adds	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3301      	adds	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f5      	bne.n	8007346 <USBD_GetLen+0xe>
  }

  return len;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2202      	movs	r2, #2
 8007378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800737c:	88fa      	ldrh	r2, [r7, #6]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	2100      	movs	r1, #0
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fc06 	bl	8007ba0 <USBD_LL_Transmit>

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	4613      	mov	r3, r2
 80073aa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	2100      	movs	r1, #0
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fbf4 	bl	8007ba0 <USBD_LL_Transmit>

  return USBD_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	2100      	movs	r1, #0
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 fc05 	bl	8007be6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2204      	movs	r2, #4
 80073f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073f6:	2300      	movs	r3, #0
 80073f8:	2200      	movs	r2, #0
 80073fa:	2100      	movs	r1, #0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fbcf 	bl	8007ba0 <USBD_LL_Transmit>

  return USBD_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2205      	movs	r2, #5
 8007418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800741c:	2300      	movs	r3, #0
 800741e:	2200      	movs	r2, #0
 8007420:	2100      	movs	r1, #0
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fbdf 	bl	8007be6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007438:	2200      	movs	r2, #0
 800743a:	4912      	ldr	r1, [pc, #72]	; (8007484 <MX_USB_DEVICE_Init+0x50>)
 800743c:	4812      	ldr	r0, [pc, #72]	; (8007488 <MX_USB_DEVICE_Init+0x54>)
 800743e:	f7fe ff7d 	bl	800633c <USBD_Init>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007448:	f7f8 ff14 	bl	8000274 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800744c:	490f      	ldr	r1, [pc, #60]	; (800748c <MX_USB_DEVICE_Init+0x58>)
 800744e:	480e      	ldr	r0, [pc, #56]	; (8007488 <MX_USB_DEVICE_Init+0x54>)
 8007450:	f7fe ff9f 	bl	8006392 <USBD_RegisterClass>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800745a:	f7f8 ff0b 	bl	8000274 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800745e:	490c      	ldr	r1, [pc, #48]	; (8007490 <MX_USB_DEVICE_Init+0x5c>)
 8007460:	4809      	ldr	r0, [pc, #36]	; (8007488 <MX_USB_DEVICE_Init+0x54>)
 8007462:	f7fd ff4b 	bl	80052fc <USBD_MSC_RegisterStorage>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800746c:	f7f8 ff02 	bl	8000274 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007470:	4805      	ldr	r0, [pc, #20]	; (8007488 <MX_USB_DEVICE_Init+0x54>)
 8007472:	f7fe ffa7 	bl	80063c4 <USBD_Start>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800747c:	f7f8 fefa 	bl	8000274 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007480:	bf00      	nop
 8007482:	bd80      	pop	{r7, pc}
 8007484:	200000b0 	.word	0x200000b0
 8007488:	200003b4 	.word	0x200003b4
 800748c:	2000000c 	.word	0x2000000c
 8007490:	20000100 	.word	0x20000100

08007494 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2212      	movs	r2, #18
 80074a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074a6:	4b03      	ldr	r3, [pc, #12]	; (80074b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	200000cc 	.word	0x200000cc

080074b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	6039      	str	r1, [r7, #0]
 80074c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2204      	movs	r2, #4
 80074c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80074ca:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	200000e0 	.word	0x200000e0

080074dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	6039      	str	r1, [r7, #0]
 80074e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	4907      	ldr	r1, [pc, #28]	; (8007510 <USBD_FS_ProductStrDescriptor+0x34>)
 80074f2:	4808      	ldr	r0, [pc, #32]	; (8007514 <USBD_FS_ProductStrDescriptor+0x38>)
 80074f4:	f7ff fede 	bl	80072b4 <USBD_GetString>
 80074f8:	e004      	b.n	8007504 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	4904      	ldr	r1, [pc, #16]	; (8007510 <USBD_FS_ProductStrDescriptor+0x34>)
 80074fe:	4805      	ldr	r0, [pc, #20]	; (8007514 <USBD_FS_ProductStrDescriptor+0x38>)
 8007500:	f7ff fed8 	bl	80072b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007504:	4b02      	ldr	r3, [pc, #8]	; (8007510 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000678 	.word	0x20000678
 8007514:	08007d6c 	.word	0x08007d6c

08007518 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	4904      	ldr	r1, [pc, #16]	; (8007538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007528:	4804      	ldr	r0, [pc, #16]	; (800753c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800752a:	f7ff fec3 	bl	80072b4 <USBD_GetString>
  return USBD_StrDesc;
 800752e:	4b02      	ldr	r3, [pc, #8]	; (8007538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000678 	.word	0x20000678
 800753c:	08007d80 	.word	0x08007d80

08007540 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	221a      	movs	r2, #26
 8007550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007552:	f000 f843 	bl	80075dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007556:	4b02      	ldr	r3, [pc, #8]	; (8007560 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200000e4 	.word	0x200000e4

08007564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4907      	ldr	r1, [pc, #28]	; (8007598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800757a:	4808      	ldr	r0, [pc, #32]	; (800759c <USBD_FS_ConfigStrDescriptor+0x38>)
 800757c:	f7ff fe9a 	bl	80072b4 <USBD_GetString>
 8007580:	e004      	b.n	800758c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4904      	ldr	r1, [pc, #16]	; (8007598 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007586:	4805      	ldr	r0, [pc, #20]	; (800759c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007588:	f7ff fe94 	bl	80072b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000678 	.word	0x20000678
 800759c:	08007d94 	.word	0x08007d94

080075a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d105      	bne.n	80075be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	4907      	ldr	r1, [pc, #28]	; (80075d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075b6:	4808      	ldr	r0, [pc, #32]	; (80075d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075b8:	f7ff fe7c 	bl	80072b4 <USBD_GetString>
 80075bc:	e004      	b.n	80075c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	4904      	ldr	r1, [pc, #16]	; (80075d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075c2:	4805      	ldr	r0, [pc, #20]	; (80075d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075c4:	f7ff fe76 	bl	80072b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20000678 	.word	0x20000678
 80075d8:	08007da0 	.word	0x08007da0

080075dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <Get_SerialNum+0x44>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <Get_SerialNum+0x48>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075ee:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <Get_SerialNum+0x4c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007602:	2208      	movs	r2, #8
 8007604:	4909      	ldr	r1, [pc, #36]	; (800762c <Get_SerialNum+0x50>)
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f814 	bl	8007634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800760c:	2204      	movs	r2, #4
 800760e:	4908      	ldr	r1, [pc, #32]	; (8007630 <Get_SerialNum+0x54>)
 8007610:	68b8      	ldr	r0, [r7, #8]
 8007612:	f000 f80f 	bl	8007634 <IntToUnicode>
  }
}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	1ffff7e8 	.word	0x1ffff7e8
 8007624:	1ffff7ec 	.word	0x1ffff7ec
 8007628:	1ffff7f0 	.word	0x1ffff7f0
 800762c:	200000e6 	.word	0x200000e6
 8007630:	200000f6 	.word	0x200000f6

08007634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]
 800764a:	e027      	b.n	800769c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	0f1b      	lsrs	r3, r3, #28
 8007650:	2b09      	cmp	r3, #9
 8007652:	d80b      	bhi.n	800766c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	0f1b      	lsrs	r3, r3, #28
 8007658:	b2da      	uxtb	r2, r3
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4619      	mov	r1, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	440b      	add	r3, r1
 8007664:	3230      	adds	r2, #48	; 0x30
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e00a      	b.n	8007682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	0f1b      	lsrs	r3, r3, #28
 8007670:	b2da      	uxtb	r2, r3
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	4619      	mov	r1, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	440b      	add	r3, r1
 800767c:	3237      	adds	r2, #55	; 0x37
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	3301      	adds	r3, #1
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	3301      	adds	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
 800769c:	7dfa      	ldrb	r2, [r7, #23]
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d3d3      	bcc.n	800764c <IntToUnicode+0x18>
  }
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80076ba:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr

080076c6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	4603      	mov	r3, r0
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80076da:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e2:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80076e4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr

080076f0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	4603      	mov	r3, r0
 80076f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076fa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr

08007706 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	4603      	mov	r3, r0
 800770e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007710:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr

0800771c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	461a      	mov	r2, r3
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	4613      	mov	r3, r2
 800772e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8007730:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	461a      	mov	r2, r3
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	4613      	mov	r3, r2
 800774e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8007750:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007760:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007762:	4618      	mov	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr
	...

0800776c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a0d      	ldr	r2, [pc, #52]	; (80077b0 <HAL_PCD_MspInit+0x44>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d113      	bne.n	80077a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800777e:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <HAL_PCD_MspInit+0x48>)
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	4a0c      	ldr	r2, [pc, #48]	; (80077b4 <HAL_PCD_MspInit+0x48>)
 8007784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007788:	61d3      	str	r3, [r2, #28]
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <HAL_PCD_MspInit+0x48>)
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007796:	2200      	movs	r2, #0
 8007798:	2100      	movs	r1, #0
 800779a:	2014      	movs	r0, #20
 800779c:	f7f8 ff39 	bl	8000612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80077a0:	2014      	movs	r0, #20
 80077a2:	f7f8 ff52 	bl	800064a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40005c00 	.word	0x40005c00
 80077b4:	40021000 	.word	0x40021000

080077b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fe fe40 	bl	8006454 <USBD_LL_SetupStage>
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	440b      	add	r3, r1
 80077fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	4619      	mov	r1, r3
 8007806:	f7fe fe72 	bl	80064ee <USBD_LL_DataOutStage>
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	440b      	add	r3, r1
 8007832:	333c      	adds	r3, #60	; 0x3c
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	4619      	mov	r1, r3
 800783a:	f7fe fec9 	bl	80065d0 <USBD_LL_DataInStage>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe ffd9 	bl	800680c <USBD_LL_SOF>
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800786a:	2301      	movs	r3, #1
 800786c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d001      	beq.n	800787a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007876:	f7f8 fcfd 	bl	8000274 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007880:	7bfa      	ldrb	r2, [r7, #15]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe ff89 	bl	800679c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe ff42 	bl	800671a <USBD_LL_Reset>
}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe ff83 	bl	80067ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <HAL_PCD_SuspendCallback+0x30>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	4a03      	ldr	r2, [pc, #12]	; (80078d0 <HAL_PCD_SuspendCallback+0x30>)
 80078c2:	f043 0306 	orr.w	r3, r3, #6
 80078c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	e000ed00 	.word	0xe000ed00

080078d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe ff7d 	bl	80067e2 <USBD_LL_Resume>
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078f8:	4a23      	ldr	r2, [pc, #140]	; (8007988 <USBD_LL_Init+0x98>)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a21      	ldr	r2, [pc, #132]	; (8007988 <USBD_LL_Init+0x98>)
 8007904:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007908:	4b1f      	ldr	r3, [pc, #124]	; (8007988 <USBD_LL_Init+0x98>)
 800790a:	4a20      	ldr	r2, [pc, #128]	; (800798c <USBD_LL_Init+0x9c>)
 800790c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800790e:	4b1e      	ldr	r3, [pc, #120]	; (8007988 <USBD_LL_Init+0x98>)
 8007910:	2208      	movs	r2, #8
 8007912:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007914:	4b1c      	ldr	r3, [pc, #112]	; (8007988 <USBD_LL_Init+0x98>)
 8007916:	2202      	movs	r2, #2
 8007918:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800791a:	4b1b      	ldr	r3, [pc, #108]	; (8007988 <USBD_LL_Init+0x98>)
 800791c:	2200      	movs	r2, #0
 800791e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007920:	4b19      	ldr	r3, [pc, #100]	; (8007988 <USBD_LL_Init+0x98>)
 8007922:	2200      	movs	r2, #0
 8007924:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007926:	4b18      	ldr	r3, [pc, #96]	; (8007988 <USBD_LL_Init+0x98>)
 8007928:	2200      	movs	r2, #0
 800792a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800792c:	4816      	ldr	r0, [pc, #88]	; (8007988 <USBD_LL_Init+0x98>)
 800792e:	f7f8 fea6 	bl	800067e <HAL_PCD_Init>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007938:	f7f8 fc9c 	bl	8000274 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007942:	2318      	movs	r3, #24
 8007944:	2200      	movs	r2, #0
 8007946:	2100      	movs	r1, #0
 8007948:	f7fa fb49 	bl	8001fde <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007952:	2358      	movs	r3, #88	; 0x58
 8007954:	2200      	movs	r2, #0
 8007956:	2180      	movs	r1, #128	; 0x80
 8007958:	f7fa fb41 	bl	8001fde <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007962:	2398      	movs	r3, #152	; 0x98
 8007964:	2200      	movs	r2, #0
 8007966:	2181      	movs	r1, #129	; 0x81
 8007968:	f7fa fb39 	bl	8001fde <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007972:	23d8      	movs	r3, #216	; 0xd8
 8007974:	2200      	movs	r2, #0
 8007976:	2101      	movs	r1, #1
 8007978:	f7fa fb31 	bl	8001fde <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000878 	.word	0x20000878
 800798c:	40005c00 	.word	0x40005c00

08007990 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7f8 ff74 	bl	8000894 <HAL_PCD_Start>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f96e 	bl	8007c94 <USBD_Get_USB_Status>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	461a      	mov	r2, r3
 80079d4:	4603      	mov	r3, r0
 80079d6:	70fb      	strb	r3, [r7, #3]
 80079d8:	460b      	mov	r3, r1
 80079da:	70bb      	strb	r3, [r7, #2]
 80079dc:	4613      	mov	r3, r2
 80079de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079ee:	78bb      	ldrb	r3, [r7, #2]
 80079f0:	883a      	ldrh	r2, [r7, #0]
 80079f2:	78f9      	ldrb	r1, [r7, #3]
 80079f4:	f7f9 f8ee 	bl	8000bd4 <HAL_PCD_EP_Open>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f948 	bl	8007c94 <USBD_Get_USB_Status>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7f9 f935 	bl	8000ca0 <HAL_PCD_EP_Close>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f929 	bl	8007c94 <USBD_Get_USB_Status>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f9 faa9 	bl	8000fc6 <HAL_PCD_EP_Flush>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f90a 	bl	8007c94 <USBD_Get_USB_Status>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	460b      	mov	r3, r1
 8007a98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f9 f9d6 	bl	8000e5e <HAL_PCD_EP_SetStall>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f8eb 	bl	8007c94 <USBD_Get_USB_Status>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7f9 fa17 	bl	8000f1e <HAL_PCD_EP_ClrStall>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f8cc 	bl	8007c94 <USBD_Get_USB_Status>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b1c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da0c      	bge.n	8007b40 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b2c:	68f9      	ldr	r1, [r7, #12]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	4613      	mov	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	440b      	add	r3, r1
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	e00b      	b.n	8007b58 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	440b      	add	r3, r1
 8007b52:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007b56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr

08007b62 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f9 f802 	bl	8000b8a <HAL_PCD_SetAddress>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f881 	bl	8007c94 <USBD_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	461a      	mov	r2, r3
 8007bac:	460b      	mov	r3, r1
 8007bae:	72fb      	strb	r3, [r7, #11]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bc2:	893b      	ldrh	r3, [r7, #8]
 8007bc4:	7af9      	ldrb	r1, [r7, #11]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	f7f9 f906 	bl	8000dd8 <HAL_PCD_EP_Transmit>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 f85e 	bl	8007c94 <USBD_Get_USB_Status>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b086      	sub	sp, #24
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	72fb      	strb	r3, [r7, #11]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c08:	893b      	ldrh	r3, [r7, #8]
 8007c0a:	7af9      	ldrb	r1, [r7, #11]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f7f9 f88f 	bl	8000d30 <HAL_PCD_EP_Receive>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 f83b 	bl	8007c94 <USBD_Get_USB_Status>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c22:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c3e:	78fa      	ldrb	r2, [r7, #3]
 8007c40:	4611      	mov	r1, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7f9 f8b1 	bl	8000daa <HAL_PCD_EP_GetRxCount>
 8007c48:	4603      	mov	r3, r0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <USBD_static_malloc+0x14>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr
 8007c68:	20000140 	.word	0x20000140

08007c6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]

}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bc80      	pop	{r7}
 8007c7c:	4770      	bx	lr

08007c7e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b083      	sub	sp, #12
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d817      	bhi.n	8007cd8 <USBD_Get_USB_Status+0x44>
 8007ca8:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <USBD_Get_USB_Status+0x1c>)
 8007caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cae:	bf00      	nop
 8007cb0:	08007cc1 	.word	0x08007cc1
 8007cb4:	08007cc7 	.word	0x08007cc7
 8007cb8:	08007ccd 	.word	0x08007ccd
 8007cbc:	08007cd3 	.word	0x08007cd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cc4:	e00b      	b.n	8007cde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cca:	e008      	b.n	8007cde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd0:	e005      	b.n	8007cde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd6:	e002      	b.n	8007cde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	73fb      	strb	r3, [r7, #15]
    break;
 8007cdc:	bf00      	nop
  }
  return usb_status;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop

08007cec <__libc_init_array>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	2600      	movs	r6, #0
 8007cf0:	4d0c      	ldr	r5, [pc, #48]	; (8007d24 <__libc_init_array+0x38>)
 8007cf2:	4c0d      	ldr	r4, [pc, #52]	; (8007d28 <__libc_init_array+0x3c>)
 8007cf4:	1b64      	subs	r4, r4, r5
 8007cf6:	10a4      	asrs	r4, r4, #2
 8007cf8:	42a6      	cmp	r6, r4
 8007cfa:	d109      	bne.n	8007d10 <__libc_init_array+0x24>
 8007cfc:	f000 f822 	bl	8007d44 <_init>
 8007d00:	2600      	movs	r6, #0
 8007d02:	4d0a      	ldr	r5, [pc, #40]	; (8007d2c <__libc_init_array+0x40>)
 8007d04:	4c0a      	ldr	r4, [pc, #40]	; (8007d30 <__libc_init_array+0x44>)
 8007d06:	1b64      	subs	r4, r4, r5
 8007d08:	10a4      	asrs	r4, r4, #2
 8007d0a:	42a6      	cmp	r6, r4
 8007d0c:	d105      	bne.n	8007d1a <__libc_init_array+0x2e>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d14:	4798      	blx	r3
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7ee      	b.n	8007cf8 <__libc_init_array+0xc>
 8007d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1e:	4798      	blx	r3
 8007d20:	3601      	adds	r6, #1
 8007d22:	e7f2      	b.n	8007d0a <__libc_init_array+0x1e>
 8007d24:	08007dfc 	.word	0x08007dfc
 8007d28:	08007dfc 	.word	0x08007dfc
 8007d2c:	08007dfc 	.word	0x08007dfc
 8007d30:	08007e00 	.word	0x08007e00

08007d34 <memset>:
 8007d34:	4603      	mov	r3, r0
 8007d36:	4402      	add	r2, r0
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d100      	bne.n	8007d3e <memset+0xa>
 8007d3c:	4770      	bx	lr
 8007d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d42:	e7f9      	b.n	8007d38 <memset+0x4>

08007d44 <_init>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr

08007d50 <_fini>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr
